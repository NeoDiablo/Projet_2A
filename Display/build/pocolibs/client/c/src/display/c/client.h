/* --- Generated by genom 2.99.29. Do not edit -------------------------- */

#ifndef H_DISPLAY_CLIENT
#define H_DISPLAY_CLIENT


#include "genom3/c/client.h"


/* --- Interface types ----------------------------------------------------- */





#ifndef _genom_state_stats_c_type
# define _genom_state_stats_c_type
typedef struct genom_state_stats genom_state_stats;
#endif /* _genom_state_stats_c_type */

#ifndef _genom_state_stats_definition_c_type
# define _genom_state_stats_definition_c_type
struct genom_state_stats {
 float last;
 float max;
 float avg;
};
#endif /* _genom_state_stats_definition_c_type */

#include <stdint.h>

#ifndef _genom_state_rusage_c_type
# define _genom_state_rusage_c_type
typedef struct genom_state_rusage genom_state_rusage;
#endif /* _genom_state_rusage_c_type */

#ifndef _genom_state_rusage_definition_c_type
# define _genom_state_rusage_definition_c_type
struct genom_state_rusage {
 uint32_t cycles;
 genom_state_stats timings;
 genom_state_stats load;
};
#endif /* _genom_state_rusage_definition_c_type */

#include <stdint.h>

#ifndef _genom_state_activity_c_type
# define _genom_state_activity_c_type
typedef struct genom_state_activity genom_state_activity;
#endif /* _genom_state_activity_c_type */

#ifndef _genom_state_activity_definition_c_type
# define _genom_state_activity_definition_c_type
struct genom_state_activity {
 uint32_t id;
 char name[64];
};
#endif /* _genom_state_activity_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_genom_state_activity_c_type
# define _sequence_genom_state_activity_c_type
typedef struct sequence_genom_state_activity {
  uint32_t _maximum, _length;
  genom_state_activity (*_buffer);
  void (*_release)(void *_buffer);
} sequence_genom_state_activity;
#endif /* _sequence_genom_state_activity_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _genom_state_task_c_type
# define _genom_state_task_c_type
typedef struct genom_state_task genom_state_task;
#endif /* _genom_state_task_c_type */

#ifndef _sequence_genom_state_activity_c_type
# define _sequence_genom_state_activity_c_type
typedef struct sequence_genom_state_activity {
  uint32_t _maximum, _length;
  genom_state_activity (*_buffer);
  void (*_release)(void *_buffer);
} sequence_genom_state_activity;
#endif /* _sequence_genom_state_activity_c_type */

#ifndef _genom_state_task_definition_c_type
# define _genom_state_task_definition_c_type
struct genom_state_task {
 char name[64];
 genom_state_rusage rusage;
 sequence_genom_state_activity activity;
};
#endif /* _genom_state_task_definition_c_type */

#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_genom_state_task_c_type
# define _sequence_genom_state_task_c_type
typedef struct sequence_genom_state_task {
  uint32_t _maximum, _length;
  genom_state_task (*_buffer);
  void (*_release)(void *_buffer);
} sequence_genom_state_task;
#endif /* _sequence_genom_state_task_c_type */




#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _genom_state_component_c_type
# define _genom_state_component_c_type
typedef struct genom_state_component genom_state_component;
#endif /* _genom_state_component_c_type */

#ifndef _sequence_genom_state_task_c_type
# define _sequence_genom_state_task_c_type
typedef struct sequence_genom_state_task {
  uint32_t _maximum, _length;
  genom_state_task (*_buffer);
  void (*_release)(void *_buffer);
} sequence_genom_state_task;
#endif /* _sequence_genom_state_task_c_type */

#ifndef _genom_state_component_definition_c_type
# define _genom_state_component_definition_c_type
struct genom_state_component {
 sequence_genom_state_task task;
 char digest[33];
 char date[31];
 char version[32];
};
#endif /* _genom_state_component_definition_c_type */

#include <stdint.h>

#ifndef _display_order_enum_c_type
# define _display_order_enum_c_type
typedef uint32_t display_order_enum;
enum {
  display_UP =	0,
  display_DOWN =	1,
  display_LEFT =	2,
  display_RIGHT =	3,
  display_STOP =	4
};
#endif /* _display_order_enum_c_type */


#ifndef _display_order_c_type
# define _display_order_c_type
typedef struct display_order display_order;
#endif /* _display_order_c_type */

#ifndef _display_order_definition_c_type
# define _display_order_definition_c_type
struct display_order {
 display_order_enum order;
};
#endif /* _display_order_definition_c_type */


#ifndef _camera_map_c_type
# define _camera_map_c_type
typedef struct camera_map camera_map;
#endif /* _camera_map_c_type */

#ifndef _camera_map_definition_c_type
# define _camera_map_definition_c_type
struct camera_map {
 float R;
 float G;
 float B;
};
#endif /* _camera_map_definition_c_type */


#ifndef _camera_coin_c_type
# define _camera_coin_c_type
typedef struct camera_coin camera_coin;
#endif /* _camera_coin_c_type */

#ifndef _camera_coin_definition_c_type
# define _camera_coin_definition_c_type
struct camera_coin {
 float x;
 float y;
};
#endif /* _camera_coin_definition_c_type */


#ifndef _camera_arena_c_type
# define _camera_arena_c_type
typedef struct camera_arena camera_arena;
#endif /* _camera_arena_c_type */

#ifndef _camera_arena_definition_c_type
# define _camera_arena_definition_c_type
struct camera_arena {
 camera_coin haut_gauche;
 camera_coin haut_droit;
 camera_coin bas_gauche;
 camera_coin bas_droit;
};
#endif /* _camera_arena_definition_c_type */


#ifndef _camera_robot_c_type
# define _camera_robot_c_type
typedef struct camera_robot camera_robot;
#endif /* _camera_robot_c_type */

#ifndef _camera_robot_definition_c_type
# define _camera_robot_definition_c_type
struct camera_robot {
 camera_coin position_avant;
 camera_coin position_arriere_gauche;
 camera_coin position_arriere_droit;
};
#endif /* _camera_robot_definition_c_type */


#ifndef _loco_data_c_type
# define _loco_data_c_type
typedef struct loco_data loco_data;
#endif /* _loco_data_c_type */

#ifndef _loco_data_definition_c_type
# define _loco_data_definition_c_type
struct loco_data {
 float nombre;
};
#endif /* _loco_data_definition_c_type */


#ifndef _genom_incompatible_digest_client_digest_c_type
# define _genom_incompatible_digest_client_digest_c_type
typedef struct genom_incompatible_digest_client_digest genom_incompatible_digest_client_digest;
#endif /* _genom_incompatible_digest_client_digest_c_type */

#ifndef _genom_incompatible_digest_client_digest_definition_c_type
# define _genom_incompatible_digest_client_digest_definition_c_type
struct genom_incompatible_digest_client_digest {
 char version[32];
 char date[32];
};
#endif /* _genom_incompatible_digest_client_digest_definition_c_type */


#ifndef _genom_incompatible_digest_server_digest_c_type
# define _genom_incompatible_digest_server_digest_c_type
typedef struct genom_incompatible_digest_server_digest genom_incompatible_digest_server_digest;
#endif /* _genom_incompatible_digest_server_digest_c_type */

#ifndef _genom_incompatible_digest_server_digest_definition_c_type
# define _genom_incompatible_digest_server_digest_definition_c_type
struct genom_incompatible_digest_server_digest {
 char version[32];
 char date[32];
};
#endif /* _genom_incompatible_digest_server_digest_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_incompatible_digest_c_type
# define _genom_incompatible_digest_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_incompatible_digest_id[] = "::genom::incompatible_digest";
typedef struct genom_incompatible_digest_detail genom_incompatible_digest_detail;
#endif /* _genom_incompatible_digest_c_type */

#ifndef _genom_incompatible_digest_definition_c_type
# define _genom_incompatible_digest_definition_c_type
struct genom_incompatible_digest_detail {
 genom_incompatible_digest_client_digest client;
 genom_incompatible_digest_server_digest server;
};
static inline genom_event
genom_incompatible_digest(genom_incompatible_digest_detail *d, genom_context self) {
 return self->raise(genom_incompatible_digest_id, d, sizeof(*d), self);
}
#endif /* _genom_incompatible_digest_definition_c_type */


#include "genom3/c/context.h"

#ifndef _genom_bad_transition_c_type
# define _genom_bad_transition_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_bad_transition_id[] = "::genom::bad_transition";
typedef struct genom_bad_transition_detail genom_bad_transition_detail;
#endif /* _genom_bad_transition_c_type */

#ifndef _genom_bad_transition_definition_c_type
# define _genom_bad_transition_definition_c_type
struct genom_bad_transition_detail {
 char from[128];
 char to[128];
};
static inline genom_event
genom_bad_transition(genom_bad_transition_detail *d, genom_context self) {
 return self->raise(genom_bad_transition_id, d, sizeof(*d), self);
}
#endif /* _genom_bad_transition_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_interrupted_c_type
# define _genom_interrupted_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_interrupted_id[] = "::genom::interrupted";
typedef struct genom_interrupted_detail genom_interrupted_detail;
#endif /* _genom_interrupted_c_type */

#ifndef _genom_interrupted_definition_c_type
# define _genom_interrupted_definition_c_type
struct genom_interrupted_detail {
 char by[128];
};
static inline genom_event
genom_interrupted(genom_interrupted_detail *d, genom_context self) {
 return self->raise(genom_interrupted_id, d, sizeof(*d), self);
}
#endif /* _genom_interrupted_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_serialization_c_type
# define _genom_serialization_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_serialization_id[] = "::genom::serialization";
typedef void genom_serialization_detail;
#endif /* _genom_serialization_c_type */

#ifndef _genom_serialization_definition_c_type
# define _genom_serialization_definition_c_type
static inline genom_event
genom_serialization(genom_context self) {
 return self->raise(genom_serialization_id, NULL, 0, self);
}
#endif /* _genom_serialization_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_too_many_activities_c_type
# define _genom_too_many_activities_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_too_many_activities_id[] = "::genom::too_many_activities";
typedef void genom_too_many_activities_detail;
#endif /* _genom_too_many_activities_c_type */

#ifndef _genom_too_many_activities_definition_c_type
# define _genom_too_many_activities_definition_c_type
static inline genom_event
genom_too_many_activities(genom_context self) {
 return self->raise(genom_too_many_activities_id, NULL, 0, self);
}
#endif /* _genom_too_many_activities_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_disallowed_c_type
# define _genom_disallowed_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_disallowed_id[] = "::genom::disallowed";
typedef void genom_disallowed_detail;
#endif /* _genom_disallowed_c_type */

#ifndef _genom_disallowed_definition_c_type
# define _genom_disallowed_definition_c_type
static inline genom_event
genom_disallowed(genom_context self) {
 return self->raise(genom_disallowed_id, NULL, 0, self);
}
#endif /* _genom_disallowed_definition_c_type */


#include "genom3/c/context.h"

#ifndef _genom_mwerr_c_type
# define _genom_mwerr_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_mwerr_id[] = "::genom::mwerr";
typedef struct genom_mwerr_detail genom_mwerr_detail;
#endif /* _genom_mwerr_c_type */

#ifndef _genom_mwerr_definition_c_type
# define _genom_mwerr_definition_c_type
struct genom_mwerr_detail {
 char what[256];
};
static inline genom_event
genom_mwerr(genom_mwerr_detail *d, genom_context self) {
 return self->raise(genom_mwerr_id, d, sizeof(*d), self);
}
#endif /* _genom_mwerr_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_activity_c_type
# define _genom_no_such_activity_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_activity_id[] = "::genom::no_such_activity";
typedef void genom_no_such_activity_detail;
#endif /* _genom_no_such_activity_c_type */

#ifndef _genom_no_such_activity_definition_c_type
# define _genom_no_such_activity_definition_c_type
static inline genom_event
genom_no_such_activity(genom_context self) {
 return self->raise(genom_no_such_activity_id, NULL, 0, self);
}
#endif /* _genom_no_such_activity_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_inport_c_type
# define _genom_no_such_inport_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_inport_id[] = "::genom::no_such_inport";
typedef void genom_no_such_inport_detail;
#endif /* _genom_no_such_inport_c_type */

#ifndef _genom_no_such_inport_definition_c_type
# define _genom_no_such_inport_definition_c_type
static inline genom_event
genom_no_such_inport(genom_context self) {
 return self->raise(genom_no_such_inport_id, NULL, 0, self);
}
#endif /* _genom_no_such_inport_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_outport_c_type
# define _genom_no_such_outport_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_outport_id[] = "::genom::no_such_outport";
typedef void genom_no_such_outport_detail;
#endif /* _genom_no_such_outport_c_type */

#ifndef _genom_no_such_outport_definition_c_type
# define _genom_no_such_outport_definition_c_type
static inline genom_event
genom_no_such_outport(genom_context self) {
 return self->raise(genom_no_such_outport_id, NULL, 0, self);
}
#endif /* _genom_no_such_outport_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_port_io_c_type
# define _genom_port_io_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_port_io_id[] = "::genom::port_io";
typedef void genom_port_io_detail;
#endif /* _genom_port_io_c_type */

#ifndef _genom_port_io_definition_c_type
# define _genom_port_io_definition_c_type
static inline genom_event
genom_port_io(genom_context self) {
 return self->raise(genom_port_io_id, NULL, 0, self);
}
#endif /* _genom_port_io_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_remote_c_type
# define _genom_no_such_remote_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_remote_id[] = "::genom::no_such_remote";
typedef void genom_no_such_remote_detail;
#endif /* _genom_no_such_remote_c_type */

#ifndef _genom_no_such_remote_definition_c_type
# define _genom_no_such_remote_definition_c_type
static inline genom_event
genom_no_such_remote(genom_context self) {
 return self->raise(genom_no_such_remote_id, NULL, 0, self);
}
#endif /* _genom_no_such_remote_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_no_such_service_c_type
# define _genom_no_such_service_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_no_such_service_id[] = "::genom::no_such_service";
typedef void genom_no_such_service_detail;
#endif /* _genom_no_such_service_c_type */

#ifndef _genom_no_such_service_definition_c_type
# define _genom_no_such_service_definition_c_type
static inline genom_event
genom_no_such_service(genom_context self) {
 return self->raise(genom_no_such_service_id, NULL, 0, self);
}
#endif /* _genom_no_such_service_definition_c_type */

#include "genom3/c/context.h"

#ifndef _genom_remote_io_c_type
# define _genom_remote_io_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak genom_remote_io_id[] = "::genom::remote_io";
typedef void genom_remote_io_detail;
#endif /* _genom_remote_io_c_type */

#ifndef _genom_remote_io_definition_c_type
# define _genom_remote_io_definition_c_type
static inline genom_event
genom_remote_io(genom_context self) {
 return self->raise(genom_remote_io_id, NULL, 0, self);
}
#endif /* _genom_remote_io_definition_c_type */

#include "genom3/c/context.h"

#ifndef _display_INVALID_ORDER_c_type
# define _display_INVALID_ORDER_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak display_INVALID_ORDER_id[] = "::display::INVALID_ORDER";
typedef void display_INVALID_ORDER_detail;
#endif /* _display_INVALID_ORDER_c_type */

#ifndef _display_INVALID_ORDER_definition_c_type
# define _display_INVALID_ORDER_definition_c_type
static inline genom_event
display_INVALID_ORDER(genom_context self) {
 return self->raise(display_INVALID_ORDER_id, NULL, 0, self);
}
#endif /* _display_INVALID_ORDER_definition_c_type */

#include "genom3/c/context.h"

#ifndef _display_INVALID_DATA_c_type
# define _display_INVALID_DATA_c_type
#include "genom3/c/exception.h"
const char genom_extern_weak display_INVALID_DATA_id[] = "::display::INVALID_DATA";
typedef void display_INVALID_DATA_detail;
#endif /* _display_INVALID_DATA_c_type */

#ifndef _display_INVALID_DATA_definition_c_type
# define _display_INVALID_DATA_definition_c_type
static inline genom_event
display_INVALID_DATA(genom_context self) {
 return self->raise(display_INVALID_DATA_id, NULL, 0, self);
}
#endif /* _display_INVALID_DATA_definition_c_type */



/* --- Service input and output structures --------------------------------- */


/* input of abort_activity */
struct genom_display_abort_activity_input {
  uint32_t activity;
};

/* output of abort_activity */
struct genom_display_abort_activity_output {
};


/* input of connect_port */
struct genom_display_connect_port_input {
  char local[128];
  char remote[128];
};

/* output of connect_port */
struct genom_display_connect_port_output {
};


/* input of connect_service */
struct genom_display_connect_service_input {
  char local[128];
  char remote[128];
};

/* output of connect_service */
struct genom_display_connect_service_output {
};


/* input of kill */
struct genom_display_kill_input {
};

/* output of kill */
struct genom_display_kill_output {
};


/* input of GetCurrentPosition */
struct genom_display_GetCurrentPosition_input {
};

/* output of GetCurrentPosition */
struct genom_display_GetCurrentPosition_output {
  camera_robot position;
};


/* input of GetCurrentBattery */
struct genom_display_GetCurrentBattery_input {
};

/* output of GetCurrentBattery */
struct genom_display_GetCurrentBattery_output {
  loco_data batterie;
};


/* input of GetCurrentMap */
struct genom_display_GetCurrentMap_input {
};

/* output of GetCurrentMap */
struct genom_display_GetCurrentMap_output {
  camera_map image;
};


/* input of GetCurrentArena */
struct genom_display_GetCurrentArena_input {
};

/* output of GetCurrentArena */
struct genom_display_GetCurrentArena_output {
  camera_arena arene;
};


/* input of SendOrdersStop */
struct genom_display_SendOrdersStop_input {
};

/* output of SendOrdersStop */
struct genom_display_SendOrdersStop_output {
};


/* input of MonitoringStop */
struct genom_display_MonitoringStop_input {
};

/* output of MonitoringStop */
struct genom_display_MonitoringStop_output {
};


/* input of SendOrders */
struct genom_display_SendOrders_input {
};

/* output of SendOrders */
struct genom_display_SendOrders_output {
};


/* input of Monitoring */
struct genom_display_Monitoring_input {
};

/* output of Monitoring */
struct genom_display_Monitoring_output {
};



#ifdef __cplusplus
extern "C" {
#endif

/* --- Services ------------------------------------------------------------ */

genom_client		genom_display_client_init(int argc, char *argv[],
                                genom_event *ex, const void **exdetail);
void			genom_display_client_fini(genom_client h);
genom_context		genom_display_client_context(genom_client h);
const char *		genom_display_client_instance(genom_client h);
int			genom_display_client_eventfd(genom_client h);
const struct genom_service_info *
			genom_display_client_service_info(genom_client h,
				int rqstid);
int			genom_display_client_done(genom_client h, int rqstid);
genom_event		genom_display_client_wait(genom_client h, int rqstid);
genom_event		genom_display_client_clean(genom_client h,
				int rqstid);
genom_event		genom_display_client_abort(genom_client h,
                                int rqstid);
genom_event		genom_display_client_doevents(genom_client h);
char *			genom_display_client_json_error(genom_client h,
				genom_event e, const void *detail);

/* abort_activity */
typedef void (*display_abort_activity_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_display_abort_activity_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_display_client_abort_activity_rqst(
  genom_client h,
  const struct genom_display_abort_activity_input *in,
  display_abort_activity_cb sentcb, display_abort_activity_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_display_client_abort_activity_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_display_abort_activity_output **out,
  void **exdetail);

void	genom_display_client_abort_activity_init_input(
  struct genom_display_abort_activity_input *input);
void	genom_display_client_abort_activity_init_output(
  struct genom_display_abort_activity_output *output);
void	genom_display_client_abort_activity_fini_input(
  struct genom_display_abort_activity_input *input);
void	genom_display_client_abort_activity_fini_output(
  struct genom_display_abort_activity_output *output);

int	genom_display_client_abort_activity_json_scan(
  struct genom_display_abort_activity_input *in,
  const char *json, char **endptr);
int	genom_display_client_abort_activity_json_print(
  char **json, const struct genom_display_abort_activity_output *out);

/* connect_port */
typedef void (*display_connect_port_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_display_connect_port_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_display_client_connect_port_rqst(
  genom_client h,
  const struct genom_display_connect_port_input *in,
  display_connect_port_cb sentcb, display_connect_port_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_display_client_connect_port_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_display_connect_port_output **out,
  void **exdetail);

void	genom_display_client_connect_port_init_input(
  struct genom_display_connect_port_input *input);
void	genom_display_client_connect_port_init_output(
  struct genom_display_connect_port_output *output);
void	genom_display_client_connect_port_fini_input(
  struct genom_display_connect_port_input *input);
void	genom_display_client_connect_port_fini_output(
  struct genom_display_connect_port_output *output);

int	genom_display_client_connect_port_json_scan(
  struct genom_display_connect_port_input *in,
  const char *json, char **endptr);
int	genom_display_client_connect_port_json_print(
  char **json, const struct genom_display_connect_port_output *out);

/* connect_service */
typedef void (*display_connect_service_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_display_connect_service_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_display_client_connect_service_rqst(
  genom_client h,
  const struct genom_display_connect_service_input *in,
  display_connect_service_cb sentcb, display_connect_service_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_display_client_connect_service_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_display_connect_service_output **out,
  void **exdetail);

void	genom_display_client_connect_service_init_input(
  struct genom_display_connect_service_input *input);
void	genom_display_client_connect_service_init_output(
  struct genom_display_connect_service_output *output);
void	genom_display_client_connect_service_fini_input(
  struct genom_display_connect_service_input *input);
void	genom_display_client_connect_service_fini_output(
  struct genom_display_connect_service_output *output);

int	genom_display_client_connect_service_json_scan(
  struct genom_display_connect_service_input *in,
  const char *json, char **endptr);
int	genom_display_client_connect_service_json_print(
  char **json, const struct genom_display_connect_service_output *out);

/* kill */
typedef void (*display_kill_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_display_kill_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_display_client_kill_rqst(
  genom_client h,
  const struct genom_display_kill_input *in,
  display_kill_cb sentcb, display_kill_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_display_client_kill_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_display_kill_output **out,
  void **exdetail);

void	genom_display_client_kill_init_input(
  struct genom_display_kill_input *input);
void	genom_display_client_kill_init_output(
  struct genom_display_kill_output *output);
void	genom_display_client_kill_fini_input(
  struct genom_display_kill_input *input);
void	genom_display_client_kill_fini_output(
  struct genom_display_kill_output *output);

int	genom_display_client_kill_json_scan(
  struct genom_display_kill_input *in,
  const char *json, char **endptr);
int	genom_display_client_kill_json_print(
  char **json, const struct genom_display_kill_output *out);

/* GetCurrentPosition */
typedef void (*display_GetCurrentPosition_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_display_GetCurrentPosition_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_display_client_GetCurrentPosition_rqst(
  genom_client h,
  const struct genom_display_GetCurrentPosition_input *in,
  display_GetCurrentPosition_cb sentcb, display_GetCurrentPosition_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_display_client_GetCurrentPosition_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_display_GetCurrentPosition_output **out,
  void **exdetail);

void	genom_display_client_GetCurrentPosition_init_input(
  struct genom_display_GetCurrentPosition_input *input);
void	genom_display_client_GetCurrentPosition_init_output(
  struct genom_display_GetCurrentPosition_output *output);
void	genom_display_client_GetCurrentPosition_fini_input(
  struct genom_display_GetCurrentPosition_input *input);
void	genom_display_client_GetCurrentPosition_fini_output(
  struct genom_display_GetCurrentPosition_output *output);

int	genom_display_client_GetCurrentPosition_json_scan(
  struct genom_display_GetCurrentPosition_input *in,
  const char *json, char **endptr);
int	genom_display_client_GetCurrentPosition_json_print(
  char **json, const struct genom_display_GetCurrentPosition_output *out);

/* GetCurrentBattery */
typedef void (*display_GetCurrentBattery_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_display_GetCurrentBattery_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_display_client_GetCurrentBattery_rqst(
  genom_client h,
  const struct genom_display_GetCurrentBattery_input *in,
  display_GetCurrentBattery_cb sentcb, display_GetCurrentBattery_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_display_client_GetCurrentBattery_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_display_GetCurrentBattery_output **out,
  void **exdetail);

void	genom_display_client_GetCurrentBattery_init_input(
  struct genom_display_GetCurrentBattery_input *input);
void	genom_display_client_GetCurrentBattery_init_output(
  struct genom_display_GetCurrentBattery_output *output);
void	genom_display_client_GetCurrentBattery_fini_input(
  struct genom_display_GetCurrentBattery_input *input);
void	genom_display_client_GetCurrentBattery_fini_output(
  struct genom_display_GetCurrentBattery_output *output);

int	genom_display_client_GetCurrentBattery_json_scan(
  struct genom_display_GetCurrentBattery_input *in,
  const char *json, char **endptr);
int	genom_display_client_GetCurrentBattery_json_print(
  char **json, const struct genom_display_GetCurrentBattery_output *out);

/* GetCurrentMap */
typedef void (*display_GetCurrentMap_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_display_GetCurrentMap_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_display_client_GetCurrentMap_rqst(
  genom_client h,
  const struct genom_display_GetCurrentMap_input *in,
  display_GetCurrentMap_cb sentcb, display_GetCurrentMap_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_display_client_GetCurrentMap_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_display_GetCurrentMap_output **out,
  void **exdetail);

void	genom_display_client_GetCurrentMap_init_input(
  struct genom_display_GetCurrentMap_input *input);
void	genom_display_client_GetCurrentMap_init_output(
  struct genom_display_GetCurrentMap_output *output);
void	genom_display_client_GetCurrentMap_fini_input(
  struct genom_display_GetCurrentMap_input *input);
void	genom_display_client_GetCurrentMap_fini_output(
  struct genom_display_GetCurrentMap_output *output);

int	genom_display_client_GetCurrentMap_json_scan(
  struct genom_display_GetCurrentMap_input *in,
  const char *json, char **endptr);
int	genom_display_client_GetCurrentMap_json_print(
  char **json, const struct genom_display_GetCurrentMap_output *out);

/* GetCurrentArena */
typedef void (*display_GetCurrentArena_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_display_GetCurrentArena_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_display_client_GetCurrentArena_rqst(
  genom_client h,
  const struct genom_display_GetCurrentArena_input *in,
  display_GetCurrentArena_cb sentcb, display_GetCurrentArena_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_display_client_GetCurrentArena_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_display_GetCurrentArena_output **out,
  void **exdetail);

void	genom_display_client_GetCurrentArena_init_input(
  struct genom_display_GetCurrentArena_input *input);
void	genom_display_client_GetCurrentArena_init_output(
  struct genom_display_GetCurrentArena_output *output);
void	genom_display_client_GetCurrentArena_fini_input(
  struct genom_display_GetCurrentArena_input *input);
void	genom_display_client_GetCurrentArena_fini_output(
  struct genom_display_GetCurrentArena_output *output);

int	genom_display_client_GetCurrentArena_json_scan(
  struct genom_display_GetCurrentArena_input *in,
  const char *json, char **endptr);
int	genom_display_client_GetCurrentArena_json_print(
  char **json, const struct genom_display_GetCurrentArena_output *out);

/* SendOrdersStop */
typedef void (*display_SendOrdersStop_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_display_SendOrdersStop_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_display_client_SendOrdersStop_rqst(
  genom_client h,
  const struct genom_display_SendOrdersStop_input *in,
  display_SendOrdersStop_cb sentcb, display_SendOrdersStop_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_display_client_SendOrdersStop_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_display_SendOrdersStop_output **out,
  void **exdetail);

void	genom_display_client_SendOrdersStop_init_input(
  struct genom_display_SendOrdersStop_input *input);
void	genom_display_client_SendOrdersStop_init_output(
  struct genom_display_SendOrdersStop_output *output);
void	genom_display_client_SendOrdersStop_fini_input(
  struct genom_display_SendOrdersStop_input *input);
void	genom_display_client_SendOrdersStop_fini_output(
  struct genom_display_SendOrdersStop_output *output);

int	genom_display_client_SendOrdersStop_json_scan(
  struct genom_display_SendOrdersStop_input *in,
  const char *json, char **endptr);
int	genom_display_client_SendOrdersStop_json_print(
  char **json, const struct genom_display_SendOrdersStop_output *out);

/* MonitoringStop */
typedef void (*display_MonitoringStop_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_display_MonitoringStop_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_display_client_MonitoringStop_rqst(
  genom_client h,
  const struct genom_display_MonitoringStop_input *in,
  display_MonitoringStop_cb sentcb, display_MonitoringStop_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_display_client_MonitoringStop_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_display_MonitoringStop_output **out,
  void **exdetail);

void	genom_display_client_MonitoringStop_init_input(
  struct genom_display_MonitoringStop_input *input);
void	genom_display_client_MonitoringStop_init_output(
  struct genom_display_MonitoringStop_output *output);
void	genom_display_client_MonitoringStop_fini_input(
  struct genom_display_MonitoringStop_input *input);
void	genom_display_client_MonitoringStop_fini_output(
  struct genom_display_MonitoringStop_output *output);

int	genom_display_client_MonitoringStop_json_scan(
  struct genom_display_MonitoringStop_input *in,
  const char *json, char **endptr);
int	genom_display_client_MonitoringStop_json_print(
  char **json, const struct genom_display_MonitoringStop_output *out);

/* SendOrders */
typedef void (*display_SendOrders_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_display_SendOrders_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_display_client_SendOrders_rqst(
  genom_client h,
  const struct genom_display_SendOrders_input *in,
  display_SendOrders_cb sentcb, display_SendOrders_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_display_client_SendOrders_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_display_SendOrders_output **out,
  void **exdetail);

void	genom_display_client_SendOrders_init_input(
  struct genom_display_SendOrders_input *input);
void	genom_display_client_SendOrders_init_output(
  struct genom_display_SendOrders_output *output);
void	genom_display_client_SendOrders_fini_input(
  struct genom_display_SendOrders_input *input);
void	genom_display_client_SendOrders_fini_output(
  struct genom_display_SendOrders_output *output);

int	genom_display_client_SendOrders_json_scan(
  struct genom_display_SendOrders_input *in,
  const char *json, char **endptr);
int	genom_display_client_SendOrders_json_print(
  char **json, const struct genom_display_SendOrders_output *out);

/* Monitoring */
typedef void (*display_Monitoring_cb)(
  genom_client h,
  int rqstid,
  genom_event report,
  struct genom_display_Monitoring_output *out,
  const void *exdetail,
  void *cb_data);

genom_event genom_display_client_Monitoring_rqst(
  genom_client h,
  const struct genom_display_Monitoring_input *in,
  display_Monitoring_cb sentcb, display_Monitoring_cb donecb,
  void *cb_data, int *rqstid);

genom_event genom_display_client_Monitoring_result(
  genom_client h, int rqstid, genom_event *report,
  struct genom_display_Monitoring_output **out,
  void **exdetail);

void	genom_display_client_Monitoring_init_input(
  struct genom_display_Monitoring_input *input);
void	genom_display_client_Monitoring_init_output(
  struct genom_display_Monitoring_output *output);
void	genom_display_client_Monitoring_fini_input(
  struct genom_display_Monitoring_input *input);
void	genom_display_client_Monitoring_fini_output(
  struct genom_display_Monitoring_output *output);

int	genom_display_client_Monitoring_json_scan(
  struct genom_display_Monitoring_input *in,
  const char *json, char **endptr);
int	genom_display_client_Monitoring_json_print(
  char **json, const struct genom_display_Monitoring_output *out);



/* --- Ports --------------------------------------------------------------- */

/* genom_state */
#line 78 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
genom_event genom_display_client_genom_state_port(
  genom_client h,
  genom_state_component *data);

/* JS */
#line 25 "/home/neoangel/work/Projet_2A/Display/display.gen"
genom_event genom_display_client_JS_port(
  genom_client h,
  display_order *data);


void	genom_display_client_genom_state_init_data(
  genom_state_component *data);
void	genom_display_client_genom_state_fini_data(
  genom_state_component *data);
int	genom_display_client_genom_state_json_print(char **json,
  const genom_state_component *data);

void	genom_display_client_JS_init_data(
  display_order *data);
void	genom_display_client_JS_fini_data(
  display_order *data);
int	genom_display_client_JS_json_print(char **json,
  const display_order *data);




/* --- Data ---------------------------------------------------------------- */

extern const struct genom_client_info genom_display_client_info;

extern const struct genom_service_info *
			genom_display_client_abort_activity_info;
extern const struct genom_service_info *
			genom_display_client_connect_port_info;
extern const struct genom_service_info *
			genom_display_client_connect_service_info;
extern const struct genom_service_info *
			genom_display_client_kill_info;
extern const struct genom_service_info *
			genom_display_client_GetCurrentPosition_info;
extern const struct genom_service_info *
			genom_display_client_GetCurrentBattery_info;
extern const struct genom_service_info *
			genom_display_client_GetCurrentMap_info;
extern const struct genom_service_info *
			genom_display_client_GetCurrentArena_info;
extern const struct genom_service_info *
			genom_display_client_SendOrdersStop_info;
extern const struct genom_service_info *
			genom_display_client_MonitoringStop_info;
extern const struct genom_service_info *
			genom_display_client_SendOrders_info;
extern const struct genom_service_info *
			genom_display_client_Monitoring_info;

extern const struct genom_port_info *
			genom_display_client_genom_state_info;
extern const struct genom_port_info *
			genom_display_client_JS_info;

#ifdef __cplusplus
}
#endif

#endif /* H_DISPLAY_CLIENT */
