/* --- Generated by genom 2.99.29. Do not edit -------------------------- */

#ifndef H_DISPLAY_MSGLIB
#define H_DISPLAY_MSGLIB

#include <stddef.h>

#include "portLib.h"
#include "csLib.h"

#include "serialize.h"


/* --- Service/task id ----------------------------------------------------- */

enum {
  DISPLAY_abort_activity_RQSTID,
  DISPLAY_connect_port_RQSTID,
  DISPLAY_connect_service_RQSTID,
  DISPLAY_kill_RQSTID,
  DISPLAY_GetCurrentPosition_RQSTID,
  DISPLAY_GetCurrentBattery_RQSTID,
  DISPLAY_GetCurrentMap_RQSTID,
  DISPLAY_GetCurrentArena_RQSTID,
  DISPLAY_SendOrdersStop_RQSTID,
  DISPLAY_MonitoringStop_RQSTID,
  DISPLAY_SendOrders_RQSTID,
  DISPLAY_Monitoring_RQSTID,

  /* total */
  DISPLAY_NRQSTID
};

enum {
  display_orders_TASKID,
  display_monitor_TASKID,

  /* total */
  display_NTASKID
};


/* --- Mailboxes ----------------------------------------------------------- */

/* mailbox buffer size for a message of size "size" */
#define MBOX_BUF_SIZE(size)                             \
  ((size) + 4 - ((size) & 3) + sizeof(LETTER_HDR) + 8)

/* Maximum request size - compilers should optimize this away */
static __inline__ size_t
genom_display_max_rqst_size(void)
{
  size_t m = 0, s;

  /* input of abort_activity */
  s = 0;
  s += genom_maxserialen_unsigned_long();
  if (m < s) m = s;

  /* input of connect_port */
  s = 0;
  s += genom_maxserialen_string128();
  s += genom_maxserialen_string128();
  if (m < s) m = s;

  /* input of connect_service */
  s = 0;
  s += genom_maxserialen_string128();
  s += genom_maxserialen_string128();
  if (m < s) m = s;

  /* input of kill */
  s = 0;
  if (m < s) m = s;

  /* input of GetCurrentPosition */
  s = 0;
  if (m < s) m = s;

  /* input of GetCurrentBattery */
  s = 0;
  if (m < s) m = s;

  /* input of GetCurrentMap */
  s = 0;
  if (m < s) m = s;

  /* input of GetCurrentArena */
  s = 0;
  if (m < s) m = s;

  /* input of SendOrdersStop */
  s = 0;
  if (m < s) m = s;

  /* input of MonitoringStop */
  s = 0;
  if (m < s) m = s;

  /* input of SendOrders */
  s = 0;
  if (m < s) m = s;

  /* input of Monitoring */
  s = 0;
  if (m < s) m = s;

  return m;
}
#define  DISPLAY_MAX_RQST_SIZE	genom_display_max_rqst_size()

/* Size of reception mailbox */
#define  DISPLAY_MBOX_RQST_SIZE                                \
  (MBOX_BUF_SIZE(DISPLAY_MAX_RQST_SIZE) * SERV_NMAX_RQST_ID)


/* Maximum reply size */
static __inline__ size_t
genom_display_max_reply_size()
{
  size_t m = 0, s;

  /* output of abort_activity */
  s = 1; /* ok flag */
  if (m < s) m = s;

  /* throws of abort_activity */
  s = sizeof(genom_incompatible_digest_id);
  s += genom_maxserialen_t_genom_incompatible_digest();
  if (m < s) m = s;
  s = sizeof(genom_bad_transition_id);
  s += genom_maxserialen_t_genom_bad_transition();
  if (m < s) m = s;
  s = sizeof(genom_interrupted_id);
  s += genom_maxserialen_t_genom_interrupted();
  if (m < s) m = s;
  s = sizeof(genom_serialization_id);
  s += genom_maxserialen_t_genom_serialization();
  if (m < s) m = s;
  s = sizeof(genom_too_many_activities_id);
  s += genom_maxserialen_t_genom_too_many_activities();
  if (m < s) m = s;
  s = sizeof(genom_disallowed_id);
  s += genom_maxserialen_t_genom_disallowed();
  if (m < s) m = s;
  s = sizeof(genom_mwerr_id);
  s += genom_maxserialen_t_genom_mwerr();
  if (m < s) m = s;
  s = sizeof(genom_no_such_activity_id);
  s += genom_maxserialen_t_genom_no_such_activity();
  if (m < s) m = s;

  /* output of connect_port */
  s = 1; /* ok flag */
  if (m < s) m = s;

  /* throws of connect_port */
  s = sizeof(genom_incompatible_digest_id);
  s += genom_maxserialen_t_genom_incompatible_digest();
  if (m < s) m = s;
  s = sizeof(genom_bad_transition_id);
  s += genom_maxserialen_t_genom_bad_transition();
  if (m < s) m = s;
  s = sizeof(genom_interrupted_id);
  s += genom_maxserialen_t_genom_interrupted();
  if (m < s) m = s;
  s = sizeof(genom_serialization_id);
  s += genom_maxserialen_t_genom_serialization();
  if (m < s) m = s;
  s = sizeof(genom_too_many_activities_id);
  s += genom_maxserialen_t_genom_too_many_activities();
  if (m < s) m = s;
  s = sizeof(genom_disallowed_id);
  s += genom_maxserialen_t_genom_disallowed();
  if (m < s) m = s;
  s = sizeof(genom_mwerr_id);
  s += genom_maxserialen_t_genom_mwerr();
  if (m < s) m = s;
  s = sizeof(genom_no_such_inport_id);
  s += genom_maxserialen_t_genom_no_such_inport();
  if (m < s) m = s;
  s = sizeof(genom_no_such_outport_id);
  s += genom_maxserialen_t_genom_no_such_outport();
  if (m < s) m = s;
  s = sizeof(genom_port_io_id);
  s += genom_maxserialen_t_genom_port_io();
  if (m < s) m = s;

  /* output of connect_service */
  s = 1; /* ok flag */
  if (m < s) m = s;

  /* throws of connect_service */
  s = sizeof(genom_incompatible_digest_id);
  s += genom_maxserialen_t_genom_incompatible_digest();
  if (m < s) m = s;
  s = sizeof(genom_bad_transition_id);
  s += genom_maxserialen_t_genom_bad_transition();
  if (m < s) m = s;
  s = sizeof(genom_interrupted_id);
  s += genom_maxserialen_t_genom_interrupted();
  if (m < s) m = s;
  s = sizeof(genom_serialization_id);
  s += genom_maxserialen_t_genom_serialization();
  if (m < s) m = s;
  s = sizeof(genom_too_many_activities_id);
  s += genom_maxserialen_t_genom_too_many_activities();
  if (m < s) m = s;
  s = sizeof(genom_disallowed_id);
  s += genom_maxserialen_t_genom_disallowed();
  if (m < s) m = s;
  s = sizeof(genom_mwerr_id);
  s += genom_maxserialen_t_genom_mwerr();
  if (m < s) m = s;
  s = sizeof(genom_no_such_remote_id);
  s += genom_maxserialen_t_genom_no_such_remote();
  if (m < s) m = s;
  s = sizeof(genom_no_such_service_id);
  s += genom_maxserialen_t_genom_no_such_service();
  if (m < s) m = s;
  s = sizeof(genom_remote_io_id);
  s += genom_maxserialen_t_genom_remote_io();
  if (m < s) m = s;

  /* output of kill */
  s = 1; /* ok flag */
  if (m < s) m = s;

  /* throws of kill */
  s = sizeof(genom_incompatible_digest_id);
  s += genom_maxserialen_t_genom_incompatible_digest();
  if (m < s) m = s;
  s = sizeof(genom_bad_transition_id);
  s += genom_maxserialen_t_genom_bad_transition();
  if (m < s) m = s;
  s = sizeof(genom_interrupted_id);
  s += genom_maxserialen_t_genom_interrupted();
  if (m < s) m = s;
  s = sizeof(genom_serialization_id);
  s += genom_maxserialen_t_genom_serialization();
  if (m < s) m = s;
  s = sizeof(genom_too_many_activities_id);
  s += genom_maxserialen_t_genom_too_many_activities();
  if (m < s) m = s;
  s = sizeof(genom_disallowed_id);
  s += genom_maxserialen_t_genom_disallowed();
  if (m < s) m = s;
  s = sizeof(genom_mwerr_id);
  s += genom_maxserialen_t_genom_mwerr();
  if (m < s) m = s;

  /* output of GetCurrentPosition */
  s = 1; /* ok flag */
  s += genom_maxserialen_t_camera_robot();
  if (m < s) m = s;

  /* throws of GetCurrentPosition */
  s = sizeof(genom_incompatible_digest_id);
  s += genom_maxserialen_t_genom_incompatible_digest();
  if (m < s) m = s;
  s = sizeof(genom_bad_transition_id);
  s += genom_maxserialen_t_genom_bad_transition();
  if (m < s) m = s;
  s = sizeof(genom_interrupted_id);
  s += genom_maxserialen_t_genom_interrupted();
  if (m < s) m = s;
  s = sizeof(genom_serialization_id);
  s += genom_maxserialen_t_genom_serialization();
  if (m < s) m = s;
  s = sizeof(genom_too_many_activities_id);
  s += genom_maxserialen_t_genom_too_many_activities();
  if (m < s) m = s;
  s = sizeof(genom_disallowed_id);
  s += genom_maxserialen_t_genom_disallowed();
  if (m < s) m = s;
  s = sizeof(genom_mwerr_id);
  s += genom_maxserialen_t_genom_mwerr();
  if (m < s) m = s;

  /* output of GetCurrentBattery */
  s = 1; /* ok flag */
  s += genom_maxserialen_t_loco_data();
  if (m < s) m = s;

  /* throws of GetCurrentBattery */
  s = sizeof(genom_incompatible_digest_id);
  s += genom_maxserialen_t_genom_incompatible_digest();
  if (m < s) m = s;
  s = sizeof(genom_bad_transition_id);
  s += genom_maxserialen_t_genom_bad_transition();
  if (m < s) m = s;
  s = sizeof(genom_interrupted_id);
  s += genom_maxserialen_t_genom_interrupted();
  if (m < s) m = s;
  s = sizeof(genom_serialization_id);
  s += genom_maxserialen_t_genom_serialization();
  if (m < s) m = s;
  s = sizeof(genom_too_many_activities_id);
  s += genom_maxserialen_t_genom_too_many_activities();
  if (m < s) m = s;
  s = sizeof(genom_disallowed_id);
  s += genom_maxserialen_t_genom_disallowed();
  if (m < s) m = s;
  s = sizeof(genom_mwerr_id);
  s += genom_maxserialen_t_genom_mwerr();
  if (m < s) m = s;

  /* output of GetCurrentMap */
  s = 1; /* ok flag */
  s += genom_maxserialen_t_camera_map();
  if (m < s) m = s;

  /* throws of GetCurrentMap */
  s = sizeof(genom_incompatible_digest_id);
  s += genom_maxserialen_t_genom_incompatible_digest();
  if (m < s) m = s;
  s = sizeof(genom_bad_transition_id);
  s += genom_maxserialen_t_genom_bad_transition();
  if (m < s) m = s;
  s = sizeof(genom_interrupted_id);
  s += genom_maxserialen_t_genom_interrupted();
  if (m < s) m = s;
  s = sizeof(genom_serialization_id);
  s += genom_maxserialen_t_genom_serialization();
  if (m < s) m = s;
  s = sizeof(genom_too_many_activities_id);
  s += genom_maxserialen_t_genom_too_many_activities();
  if (m < s) m = s;
  s = sizeof(genom_disallowed_id);
  s += genom_maxserialen_t_genom_disallowed();
  if (m < s) m = s;
  s = sizeof(genom_mwerr_id);
  s += genom_maxserialen_t_genom_mwerr();
  if (m < s) m = s;

  /* output of GetCurrentArena */
  s = 1; /* ok flag */
  s += genom_maxserialen_t_camera_arena();
  if (m < s) m = s;

  /* throws of GetCurrentArena */
  s = sizeof(genom_incompatible_digest_id);
  s += genom_maxserialen_t_genom_incompatible_digest();
  if (m < s) m = s;
  s = sizeof(genom_bad_transition_id);
  s += genom_maxserialen_t_genom_bad_transition();
  if (m < s) m = s;
  s = sizeof(genom_interrupted_id);
  s += genom_maxserialen_t_genom_interrupted();
  if (m < s) m = s;
  s = sizeof(genom_serialization_id);
  s += genom_maxserialen_t_genom_serialization();
  if (m < s) m = s;
  s = sizeof(genom_too_many_activities_id);
  s += genom_maxserialen_t_genom_too_many_activities();
  if (m < s) m = s;
  s = sizeof(genom_disallowed_id);
  s += genom_maxserialen_t_genom_disallowed();
  if (m < s) m = s;
  s = sizeof(genom_mwerr_id);
  s += genom_maxserialen_t_genom_mwerr();
  if (m < s) m = s;

  /* output of SendOrdersStop */
  s = 1; /* ok flag */
  if (m < s) m = s;

  /* throws of SendOrdersStop */
  s = sizeof(genom_incompatible_digest_id);
  s += genom_maxserialen_t_genom_incompatible_digest();
  if (m < s) m = s;
  s = sizeof(genom_bad_transition_id);
  s += genom_maxserialen_t_genom_bad_transition();
  if (m < s) m = s;
  s = sizeof(genom_interrupted_id);
  s += genom_maxserialen_t_genom_interrupted();
  if (m < s) m = s;
  s = sizeof(genom_serialization_id);
  s += genom_maxserialen_t_genom_serialization();
  if (m < s) m = s;
  s = sizeof(genom_too_many_activities_id);
  s += genom_maxserialen_t_genom_too_many_activities();
  if (m < s) m = s;
  s = sizeof(genom_disallowed_id);
  s += genom_maxserialen_t_genom_disallowed();
  if (m < s) m = s;
  s = sizeof(genom_mwerr_id);
  s += genom_maxserialen_t_genom_mwerr();
  if (m < s) m = s;

  /* output of MonitoringStop */
  s = 1; /* ok flag */
  if (m < s) m = s;

  /* throws of MonitoringStop */
  s = sizeof(genom_incompatible_digest_id);
  s += genom_maxserialen_t_genom_incompatible_digest();
  if (m < s) m = s;
  s = sizeof(genom_bad_transition_id);
  s += genom_maxserialen_t_genom_bad_transition();
  if (m < s) m = s;
  s = sizeof(genom_interrupted_id);
  s += genom_maxserialen_t_genom_interrupted();
  if (m < s) m = s;
  s = sizeof(genom_serialization_id);
  s += genom_maxserialen_t_genom_serialization();
  if (m < s) m = s;
  s = sizeof(genom_too_many_activities_id);
  s += genom_maxserialen_t_genom_too_many_activities();
  if (m < s) m = s;
  s = sizeof(genom_disallowed_id);
  s += genom_maxserialen_t_genom_disallowed();
  if (m < s) m = s;
  s = sizeof(genom_mwerr_id);
  s += genom_maxserialen_t_genom_mwerr();
  if (m < s) m = s;

  /* output of SendOrders */
  s = 1; /* ok flag */
  if (m < s) m = s;

  /* throws of SendOrders */
  s = sizeof(genom_incompatible_digest_id);
  s += genom_maxserialen_t_genom_incompatible_digest();
  if (m < s) m = s;
  s = sizeof(genom_bad_transition_id);
  s += genom_maxserialen_t_genom_bad_transition();
  if (m < s) m = s;
  s = sizeof(genom_interrupted_id);
  s += genom_maxserialen_t_genom_interrupted();
  if (m < s) m = s;
  s = sizeof(genom_serialization_id);
  s += genom_maxserialen_t_genom_serialization();
  if (m < s) m = s;
  s = sizeof(genom_too_many_activities_id);
  s += genom_maxserialen_t_genom_too_many_activities();
  if (m < s) m = s;
  s = sizeof(genom_disallowed_id);
  s += genom_maxserialen_t_genom_disallowed();
  if (m < s) m = s;
  s = sizeof(genom_mwerr_id);
  s += genom_maxserialen_t_genom_mwerr();
  if (m < s) m = s;
  s = sizeof(display_INVALID_ORDER_id);
  s += genom_maxserialen_t_display_INVALID_ORDER();
  if (m < s) m = s;

  /* output of Monitoring */
  s = 1; /* ok flag */
  if (m < s) m = s;

  /* throws of Monitoring */
  s = sizeof(genom_incompatible_digest_id);
  s += genom_maxserialen_t_genom_incompatible_digest();
  if (m < s) m = s;
  s = sizeof(genom_bad_transition_id);
  s += genom_maxserialen_t_genom_bad_transition();
  if (m < s) m = s;
  s = sizeof(genom_interrupted_id);
  s += genom_maxserialen_t_genom_interrupted();
  if (m < s) m = s;
  s = sizeof(genom_serialization_id);
  s += genom_maxserialen_t_genom_serialization();
  if (m < s) m = s;
  s = sizeof(genom_too_many_activities_id);
  s += genom_maxserialen_t_genom_too_many_activities();
  if (m < s) m = s;
  s = sizeof(genom_disallowed_id);
  s += genom_maxserialen_t_genom_disallowed();
  if (m < s) m = s;
  s = sizeof(genom_mwerr_id);
  s += genom_maxserialen_t_genom_mwerr();
  if (m < s) m = s;
  s = sizeof(display_INVALID_DATA_id);
  s += genom_maxserialen_t_display_INVALID_DATA();
  if (m < s) m = s;


  s = sizeof(genom_unkex_id) + sizeof(genom_unkex_detail);
  if (m < s) m = s;
  s = sizeof(genom_syserr_id) + sizeof(genom_syserr_detail);
  if (m < s) m = s;
  return m;
}
#define  DISPLAY_MAX_REPLY_SIZE		genom_display_max_reply_size()
#define  DISPLAY_MAX_INTERMED_REPLY_SIZE	sizeof(int)

/* Size of reply mbox (clients) */
#define  DISPLAY_CLIENT_MBOX_REPLY_SIZE        	\
  ((MBOX_BUF_SIZE(DISPLAY_MAX_REPLY_SIZE) +		\
    MBOX_BUF_SIZE(DISPLAY_MAX_INTERMED_REPLY_SIZE))	\
   * CLIENT_NMAX_RQST_ID)

#endif /* H_DISPLAY_MSGLIB */
