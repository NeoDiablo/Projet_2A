/* --- Generated by genom 2.99.29. Do not edit -------------------------- */

#ifndef H_CAMERA_PORTLIB
#define H_CAMERA_PORTLIB

#include <stddef.h>

#include "h2devLib.h"
#include "posterLib.h"

#include "camera_c_types.h"
#include "typecopy.h"

/* forward declaration */
struct genom_component_data;
struct genom_activities;


/* --- builtin ports ------------------------------------------------------- */

/* state */
int	genom_state_camera_init(struct genom_component_data *self);
int	genom_state_camera_update(struct genom_component_data *self,
		struct genom_activities *activities, int tnum);
genom_event
	genom_state_camera_refresh(struct genom_component_data *self);

/* metadata */
int		genom_metadata_camera_init(
			struct genom_component_data *self);
genom_event	genom_metadata_camera_fetch(
			struct genom_component_data *self,
                        const char *comp, pocolibs_metadata_component *meta);


/* === Port methods ======================================================== */


genom_state_component *
		genom_camera_genom_state_data(genom_context self);
genom_event	genom_camera_genom_state_open(genom_context self);
genom_event	genom_camera_genom_state_close(genom_context self);
void		genom_camera_genom_state_delete(genom_context self);

genom_event	genom_camera_genom_state_write(genom_context self);


pocolibs_metadata_component *
		genom_camera_genom_metadata_data(genom_context self);
genom_event	genom_camera_genom_metadata_open(genom_context self);
genom_event	genom_camera_genom_metadata_close(genom_context self);
void		genom_camera_genom_metadata_delete(genom_context self);

genom_event	genom_camera_genom_metadata_write(genom_context self);


camera_arena *
		genom_camera_AR_data(genom_context self);
genom_event	genom_camera_AR_open(genom_context self);
genom_event	genom_camera_AR_close(genom_context self);
void		genom_camera_AR_delete(genom_context self);

genom_event	genom_camera_AR_write(genom_context self);


camera_robot *
		genom_camera_POS_data(genom_context self);
genom_event	genom_camera_POS_open(genom_context self);
genom_event	genom_camera_POS_close(genom_context self);
void		genom_camera_POS_delete(genom_context self);

genom_event	genom_camera_POS_write(genom_context self);


camera_map *
		genom_camera_IM_data(genom_context self);
genom_event	genom_camera_IM_open(genom_context self);
genom_event	genom_camera_IM_close(genom_context self);
void		genom_camera_IM_delete(genom_context self);

genom_event	genom_camera_IM_write(genom_context self);



/* === Port structures ===================================================== */


/* --- genom_state ------------------------------------------------------ */

struct genom_camera_genom_state_port {
  camera_genom_state handle;

  struct genom_camera_genom_state_ph {
    POSTER_ID id;
    size_t size;
    genom_state_component buffer;
  }  h;
};

/* initializer */
static __inline__ void
genom_tinit_camera_genom_state_port(
  struct genom_camera_genom_state_port *p)
{
  p->handle.data = genom_camera_genom_state_data;
  p->handle.write = genom_camera_genom_state_write;
  p->h.id = NULL;
  p->h.size = 0;
  genom_tinit_t_genom_state_component(
    &(p->h.buffer));
}

/* finalizer */
static __inline__ void
genom_tfini_camera_genom_state_port(
  struct genom_camera_genom_state_port *p)
{
  genom_tfini_t_genom_state_component(
    &(p->h.buffer));
}


/* --- genom_metadata --------------------------------------------------- */

struct genom_camera_genom_metadata_port {
  camera_genom_metadata handle;

  struct genom_camera_genom_metadata_ph {
    POSTER_ID id;
    size_t size;
    pocolibs_metadata_component buffer;
  }  h;
};

/* initializer */
static __inline__ void
genom_tinit_camera_genom_metadata_port(
  struct genom_camera_genom_metadata_port *p)
{
  p->handle.data = genom_camera_genom_metadata_data;
  p->handle.write = genom_camera_genom_metadata_write;
  p->h.id = NULL;
  p->h.size = 0;
  genom_tinit_t_pocolibs_metadata_component(
    &(p->h.buffer));
}

/* finalizer */
static __inline__ void
genom_tfini_camera_genom_metadata_port(
  struct genom_camera_genom_metadata_port *p)
{
  genom_tfini_t_pocolibs_metadata_component(
    &(p->h.buffer));
}


/* --- AR --------------------------------------------------------------- */

struct genom_camera_AR_port {
  camera_AR handle;

  struct genom_camera_AR_ph {
    POSTER_ID id;
    size_t size;
    camera_arena buffer;
  }  h;
};

/* initializer */
static __inline__ void
genom_tinit_camera_AR_port(
  struct genom_camera_AR_port *p)
{
  p->handle.data = genom_camera_AR_data;
  p->handle.write = genom_camera_AR_write;
  p->h.id = NULL;
  p->h.size = 0;
  genom_tinit_t_camera_arena(
    &(p->h.buffer));
}

/* finalizer */
static __inline__ void
genom_tfini_camera_AR_port(
  struct genom_camera_AR_port *p)
{
  genom_tfini_t_camera_arena(
    &(p->h.buffer));
}


/* --- POS -------------------------------------------------------------- */

struct genom_camera_POS_port {
  camera_POS handle;

  struct genom_camera_POS_ph {
    POSTER_ID id;
    size_t size;
    camera_robot buffer;
  }  h;
};

/* initializer */
static __inline__ void
genom_tinit_camera_POS_port(
  struct genom_camera_POS_port *p)
{
  p->handle.data = genom_camera_POS_data;
  p->handle.write = genom_camera_POS_write;
  p->h.id = NULL;
  p->h.size = 0;
  genom_tinit_t_camera_robot(
    &(p->h.buffer));
}

/* finalizer */
static __inline__ void
genom_tfini_camera_POS_port(
  struct genom_camera_POS_port *p)
{
  genom_tfini_t_camera_robot(
    &(p->h.buffer));
}


/* --- IM --------------------------------------------------------------- */

struct genom_camera_IM_port {
  camera_IM handle;

  struct genom_camera_IM_ph {
    POSTER_ID id;
    size_t size;
    camera_map buffer;
  }  h;
};

/* initializer */
static __inline__ void
genom_tinit_camera_IM_port(
  struct genom_camera_IM_port *p)
{
  p->handle.data = genom_camera_IM_data;
  p->handle.write = genom_camera_IM_write;
  p->h.id = NULL;
  p->h.size = 0;
  genom_tinit_t_camera_map(
    &(p->h.buffer));
}

/* finalizer */
static __inline__ void
genom_tfini_camera_IM_port(
  struct genom_camera_IM_port *p)
{
  genom_tfini_t_camera_map(
    &(p->h.buffer));
}


#endif /* H_CAMERA_PORTLIB */
