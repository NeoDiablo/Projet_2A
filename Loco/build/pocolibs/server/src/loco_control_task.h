/* --- Generated by genom 2.99.29. Do not edit -------------------------- */

#ifndef H_LOCO_CONTROL_TASK
#define H_LOCO_CONTROL_TASK

#include <assert.h>
#include <pthread.h>
#include <stdarg.h>

#include "csLib.h"
#include "semLib.h"

#include "loco_c_types.h"
#include "loco_parameters.h"
#include "loco_msglib.h"
#include "loco_portlib.h"
#include "loco_remotelib.h"
#include "loco_activity.h"


/* --- internal state ------------------------------------------------------ */

extern const char *genom_instance;

struct genom_component_data;

struct genom_context_data {
  struct genom_component_data *self;

  genom_event ex;
  void *exdetail;
  size_t exsize;
};

struct genom_component_data {
  loco_ids ids;

  struct {
    struct genom_loco_genom_state_port genom_state;
    struct genom_loco_genom_metadata_port genom_metadata;
    struct genom_loco_JS_port JS;
    struct genom_loco_AR_port AR;
    struct genom_loco_POS_port POS;
    struct genom_loco_BAT_port BAT;
  } ports;

  struct {
  } remotes;

  struct {
    struct {
      struct genom_context_iface context;
      struct genom_context_data context_data;
      long taskid;

      genom_state_rusage rusage;
      pthread_spinlock_t rlock;

      int runnable, shutdown;
      struct genom_activity *permanent;
      struct genom_activities activities;
      pthread_mutex_t lock;
      pthread_cond_t sync;
    } move;
    struct {
      struct genom_context_iface context;
      struct genom_context_data context_data;
      long taskid;

      genom_state_rusage rusage;
      pthread_spinlock_t rlock;

      int runnable, shutdown;
      struct genom_activity *permanent;
      struct genom_activities activities;
      pthread_mutex_t lock;
      pthread_cond_t sync;
    } batt;
  } tasks;

  /* control task */
  struct {
    struct genom_context_iface context;
    struct genom_context_data context_data;
    long taskid;

    char mbox_name[64];
    SERV_ID csserv;
    int shutdown;

    struct timeval rusage_update;
    pthread_spinlock_t rlock;

    union genom_any_activity activity;
    int run_map[LOCO_NRQSTID]; /* before/after constraints */
    pthread_mutex_t lock;
    pthread_cond_t sync;
  } control;

  /* mutual exclusion for resource access */
  struct {
    int all;				/* all resources locked */
    void *control;			/* control task codel/service */
    void *task_move;		/* move codel */
    void *task_batt;		/* batt codel */

    unsigned int q, qnext;		/* fifo (ticket lock) */
    pthread_mutex_t lock;
    pthread_cond_t sync;
  } resources;
};

/* resource access */
#define genom_take_resource(self, wait, set) do {                       \
    pthread_mutex_lock(&(self)->resources.lock);                        \
    unsigned int q = (self)->resources.qnext++;                         \
    while(q != self->resources.q || (wait))                             \
      pthread_cond_wait(&(self)->resources.sync,                        \
                        &(self)->resources.lock);                       \
    set;                                                                \
    (self)->resources.q++;                                              \
    pthread_cond_broadcast(&self->resources.sync);                      \
    pthread_mutex_unlock(&self->resources.lock);                        \
  } while(0)

#define genom_give_resource(self, set) do {                             \
    pthread_mutex_lock(&(self)->resources.lock);                        \
    set;                                                                \
    pthread_cond_broadcast(&self->resources.sync);                      \
    pthread_mutex_unlock(&self->resources.lock);                        \
  } while(0)


/* control task */
void *	genom_loco_init(void);
void	genom_loco_fini(void *data);
void	genom_loco_schedule_cntrl(struct genom_component_data *self);

genom_event genom_loco_abort_activity_controlcb(
   struct genom_component_data *,
   struct genom_loco_abort_activity_activity *);
genom_event genom_loco_connect_port_controlcb(
   struct genom_component_data *,
   struct genom_loco_connect_port_activity *);
genom_event genom_loco_connect_service_controlcb(
   struct genom_component_data *,
   struct genom_loco_connect_service_activity *);
genom_event genom_loco_kill_controlcb(
   struct genom_component_data *,
   struct genom_loco_kill_activity *);
genom_event genom_loco_GetCurrentPosition_controlcb(
   struct genom_component_data *,
   struct genom_loco_GetCurrentPosition_activity *);
genom_event genom_loco_GetCurrentBattery_controlcb(
   struct genom_component_data *,
   struct genom_loco_GetCurrentBattery_activity *);
genom_event genom_loco_GetCurrentMap_controlcb(
   struct genom_component_data *,
   struct genom_loco_GetCurrentMap_activity *);
genom_event genom_loco_GetCurrentArena_controlcb(
   struct genom_component_data *,
   struct genom_loco_GetCurrentArena_activity *);
genom_event genom_loco_MoveStop_controlcb(
   struct genom_component_data *,
   struct genom_loco_MoveStop_activity *);
genom_event genom_loco_BattStop_controlcb(
   struct genom_component_data *,
   struct genom_loco_BattStop_activity *);
genom_event genom_loco_StartMove_controlcb(
   struct genom_component_data *,
   struct genom_loco_StartMove_activity *);
genom_event genom_loco_StartBatt_controlcb(
   struct genom_component_data *,
   struct genom_loco_StartBatt_activity *);


/* exec tasks */
void *		genom_loco_move_exec_task(void *data);
void		genom_loco_move_invoke_perm(
			struct genom_component_data *);
enum genom_activity_status
		genom_loco_move_invoke(
			struct genom_component_data *,
			struct genom_activity *);
void *		genom_loco_batt_exec_task(void *data);
void		genom_loco_batt_invoke_perm(
			struct genom_component_data *);
enum genom_activity_status
		genom_loco_batt_invoke(
			struct genom_component_data *,
			struct genom_activity *);


/* exceptions */
genom_event	genom_pocolibs_raise(genom_event ex, void *detail, size_t size,
                        genom_context self);
const void *	genom_pocolibs_raised(genom_event *ex, genom_context self);


/* log functions */
void	genom_log_info(const char *format, ...)
  __attribute__ ((format (printf, 1, 2)));
void	genom_log_warn(int h2error, const char *format, ...)
  __attribute__ ((format (printf, 2, 3)));
void	genom_log_debug(const char *format, ...)
  __attribute__ ((format (printf, 1, 2)));


#endif /* H_LOCO_CONTROL_TASK */
