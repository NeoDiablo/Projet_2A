/* --- Generated by genom 2.99.29. Do not edit -------------------------- */



#ifndef _genom_incompatible_digest_client_digest_c_type
# define _genom_incompatible_digest_client_digest_c_type
#line 24 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct genom_incompatible_digest_client_digest genom_incompatible_digest_client_digest;
#endif /* _genom_incompatible_digest_client_digest_c_type */

#ifndef _genom_incompatible_digest_client_digest_definition_c_type
# define _genom_incompatible_digest_client_digest_definition_c_type
struct genom_incompatible_digest_client_digest {
#line 24 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char version[32];
#line 24 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char date[32];
};
#endif /* _genom_incompatible_digest_client_digest_definition_c_type */

#ifndef _genom_incompatible_digest_server_digest_c_type
# define _genom_incompatible_digest_server_digest_c_type
#line 25 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct genom_incompatible_digest_server_digest genom_incompatible_digest_server_digest;
#endif /* _genom_incompatible_digest_server_digest_c_type */

#ifndef _genom_incompatible_digest_server_digest_definition_c_type
# define _genom_incompatible_digest_server_digest_definition_c_type
struct genom_incompatible_digest_server_digest {
#line 25 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char version[32];
#line 25 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char date[32];
};
#endif /* _genom_incompatible_digest_server_digest_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_incompatible_digest_c_type
# define _genom_incompatible_digest_c_type
#include "genom3/c/exception.h"
#line 23 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_incompatible_digest_id[] = "::genom::incompatible_digest";
#line 23 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct genom_incompatible_digest_detail genom_incompatible_digest_detail;
#endif /* _genom_incompatible_digest_c_type */

#ifndef _genom_incompatible_digest_definition_c_type
# define _genom_incompatible_digest_definition_c_type
struct genom_incompatible_digest_detail {
#line 24 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 genom_incompatible_digest_client_digest client;
#line 25 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 genom_incompatible_digest_server_digest server;
};
static inline genom_event
genom_incompatible_digest(genom_incompatible_digest_detail *d, genom_context self) {
 return self->raise(genom_incompatible_digest_id, d, sizeof(*d), self);
}
#endif /* _genom_incompatible_digest_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_bad_transition_c_type
# define _genom_bad_transition_c_type
#include "genom3/c/exception.h"
#line 29 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_bad_transition_id[] = "::genom::bad_transition";
#line 29 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct genom_bad_transition_detail genom_bad_transition_detail;
#endif /* _genom_bad_transition_c_type */

#ifndef _genom_bad_transition_definition_c_type
# define _genom_bad_transition_definition_c_type
struct genom_bad_transition_detail {
#line 29 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char from[128];
#line 29 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char to[128];
};
static inline genom_event
genom_bad_transition(genom_bad_transition_detail *d, genom_context self) {
 return self->raise(genom_bad_transition_id, d, sizeof(*d), self);
}
#endif /* _genom_bad_transition_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_interrupted_c_type
# define _genom_interrupted_c_type
#include "genom3/c/exception.h"
#line 32 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_interrupted_id[] = "::genom::interrupted";
#line 32 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct genom_interrupted_detail genom_interrupted_detail;
#endif /* _genom_interrupted_c_type */

#ifndef _genom_interrupted_definition_c_type
# define _genom_interrupted_definition_c_type
struct genom_interrupted_detail {
#line 32 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char by[128];
};
static inline genom_event
genom_interrupted(genom_interrupted_detail *d, genom_context self) {
 return self->raise(genom_interrupted_id, d, sizeof(*d), self);
}
#endif /* _genom_interrupted_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_serialization_c_type
# define _genom_serialization_c_type
#include "genom3/c/exception.h"
#line 35 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_serialization_id[] = "::genom::serialization";
#line 35 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef void genom_serialization_detail;
#endif /* _genom_serialization_c_type */

#ifndef _genom_serialization_definition_c_type
# define _genom_serialization_definition_c_type
static inline genom_event
genom_serialization(genom_context self) {
 return self->raise(genom_serialization_id, NULL, 0, self);
}
#endif /* _genom_serialization_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_too_many_activities_c_type
# define _genom_too_many_activities_c_type
#include "genom3/c/exception.h"
#line 35 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_too_many_activities_id[] = "::genom::too_many_activities";
#line 35 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef void genom_too_many_activities_detail;
#endif /* _genom_too_many_activities_c_type */

#ifndef _genom_too_many_activities_definition_c_type
# define _genom_too_many_activities_definition_c_type
static inline genom_event
genom_too_many_activities(genom_context self) {
 return self->raise(genom_too_many_activities_id, NULL, 0, self);
}
#endif /* _genom_too_many_activities_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_disallowed_c_type
# define _genom_disallowed_c_type
#include "genom3/c/exception.h"
#line 35 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_disallowed_id[] = "::genom::disallowed";
#line 35 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef void genom_disallowed_detail;
#endif /* _genom_disallowed_c_type */

#ifndef _genom_disallowed_definition_c_type
# define _genom_disallowed_definition_c_type
static inline genom_event
genom_disallowed(genom_context self) {
 return self->raise(genom_disallowed_id, NULL, 0, self);
}
#endif /* _genom_disallowed_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_no_such_inport_c_type
# define _genom_no_such_inport_c_type
#include "genom3/c/exception.h"
#line 38 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_no_such_inport_id[] = "::genom::no_such_inport";
#line 38 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef void genom_no_such_inport_detail;
#endif /* _genom_no_such_inport_c_type */

#ifndef _genom_no_such_inport_definition_c_type
# define _genom_no_such_inport_definition_c_type
static inline genom_event
genom_no_such_inport(genom_context self) {
 return self->raise(genom_no_such_inport_id, NULL, 0, self);
}
#endif /* _genom_no_such_inport_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_no_such_outport_c_type
# define _genom_no_such_outport_c_type
#include "genom3/c/exception.h"
#line 38 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_no_such_outport_id[] = "::genom::no_such_outport";
#line 38 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef void genom_no_such_outport_detail;
#endif /* _genom_no_such_outport_c_type */

#ifndef _genom_no_such_outport_definition_c_type
# define _genom_no_such_outport_definition_c_type
static inline genom_event
genom_no_such_outport(genom_context self) {
 return self->raise(genom_no_such_outport_id, NULL, 0, self);
}
#endif /* _genom_no_such_outport_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_port_io_c_type
# define _genom_port_io_c_type
#include "genom3/c/exception.h"
#line 38 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_port_io_id[] = "::genom::port_io";
#line 38 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef void genom_port_io_detail;
#endif /* _genom_port_io_c_type */

#ifndef _genom_port_io_definition_c_type
# define _genom_port_io_definition_c_type
static inline genom_event
genom_port_io(genom_context self) {
 return self->raise(genom_port_io_id, NULL, 0, self);
}
#endif /* _genom_port_io_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_no_such_remote_c_type
# define _genom_no_such_remote_c_type
#include "genom3/c/exception.h"
#line 39 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_no_such_remote_id[] = "::genom::no_such_remote";
#line 39 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef void genom_no_such_remote_detail;
#endif /* _genom_no_such_remote_c_type */

#ifndef _genom_no_such_remote_definition_c_type
# define _genom_no_such_remote_definition_c_type
static inline genom_event
genom_no_such_remote(genom_context self) {
 return self->raise(genom_no_such_remote_id, NULL, 0, self);
}
#endif /* _genom_no_such_remote_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_no_such_service_c_type
# define _genom_no_such_service_c_type
#include "genom3/c/exception.h"
#line 39 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_no_such_service_id[] = "::genom::no_such_service";
#line 39 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef void genom_no_such_service_detail;
#endif /* _genom_no_such_service_c_type */

#ifndef _genom_no_such_service_definition_c_type
# define _genom_no_such_service_definition_c_type
static inline genom_event
genom_no_such_service(genom_context self) {
 return self->raise(genom_no_such_service_id, NULL, 0, self);
}
#endif /* _genom_no_such_service_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_remote_io_c_type
# define _genom_remote_io_c_type
#include "genom3/c/exception.h"
#line 39 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_remote_io_id[] = "::genom::remote_io";
#line 39 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef void genom_remote_io_detail;
#endif /* _genom_remote_io_c_type */

#ifndef _genom_remote_io_definition_c_type
# define _genom_remote_io_definition_c_type
static inline genom_event
genom_remote_io(genom_context self) {
 return self->raise(genom_remote_io_id, NULL, 0, self);
}
#endif /* _genom_remote_io_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_no_such_activity_c_type
# define _genom_no_such_activity_c_type
#include "genom3/c/exception.h"
#line 40 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_no_such_activity_id[] = "::genom::no_such_activity";
#line 40 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef void genom_no_such_activity_detail;
#endif /* _genom_no_such_activity_c_type */

#ifndef _genom_no_such_activity_definition_c_type
# define _genom_no_such_activity_definition_c_type
static inline genom_event
genom_no_such_activity(genom_context self) {
 return self->raise(genom_no_such_activity_id, NULL, 0, self);
}
#endif /* _genom_no_such_activity_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_mwerr_c_type
# define _genom_mwerr_c_type
#include "genom3/c/exception.h"
#line 42 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
const char genom_extern_weak genom_mwerr_id[] = "::genom::mwerr";
#line 42 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct genom_mwerr_detail genom_mwerr_detail;
#endif /* _genom_mwerr_c_type */

#ifndef _genom_mwerr_definition_c_type
# define _genom_mwerr_definition_c_type
struct genom_mwerr_detail {
#line 42 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char what[256];
};
static inline genom_event
genom_mwerr(genom_mwerr_detail *d, genom_context self) {
 return self->raise(genom_mwerr_id, d, sizeof(*d), self);
}
#endif /* _genom_mwerr_definition_c_type */

#ifndef _genom_state_stats_c_type
# define _genom_state_stats_c_type
#line 48 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct genom_state_stats genom_state_stats;
#endif /* _genom_state_stats_c_type */

#ifndef _genom_state_stats_definition_c_type
# define _genom_state_stats_definition_c_type
struct genom_state_stats {
#line 49 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 float last;
#line 49 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 float max;
#line 49 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 float avg;
};
#endif /* _genom_state_stats_definition_c_type */
#include <stdint.h>

#ifndef _genom_state_rusage_c_type
# define _genom_state_rusage_c_type
#line 52 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct genom_state_rusage genom_state_rusage;
#endif /* _genom_state_rusage_c_type */

#ifndef _genom_state_rusage_definition_c_type
# define _genom_state_rusage_definition_c_type
struct genom_state_rusage {
#line 53 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 uint32_t cycles;
#line 54 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 genom_state_stats timings;
#line 55 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 genom_state_stats load;
};
#endif /* _genom_state_rusage_definition_c_type */
#include <stdint.h>

#ifndef _genom_state_activity_c_type
# define _genom_state_activity_c_type
#line 58 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct genom_state_activity genom_state_activity;
#endif /* _genom_state_activity_c_type */

#ifndef _genom_state_activity_definition_c_type
# define _genom_state_activity_definition_c_type
struct genom_state_activity {
#line 59 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 uint32_t id;
#line 60 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char name[64];
};
#endif /* _genom_state_activity_definition_c_type */
#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_genom_state_activity_c_type
# define _sequence_genom_state_activity_c_type
#line 66 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct sequence_genom_state_activity {
  uint32_t _maximum, _length;
  genom_state_activity (*_buffer);
  void (*_release)(void *_buffer);
} sequence_genom_state_activity;
#endif /* _sequence_genom_state_activity_c_type */
#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _genom_state_task_c_type
# define _genom_state_task_c_type
#line 63 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct genom_state_task genom_state_task;
#endif /* _genom_state_task_c_type */

#ifndef _sequence_genom_state_activity_c_type
# define _sequence_genom_state_activity_c_type
#line 66 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct sequence_genom_state_activity {
  uint32_t _maximum, _length;
  genom_state_activity (*_buffer);
  void (*_release)(void *_buffer);
} sequence_genom_state_activity;
#endif /* _sequence_genom_state_activity_c_type */

#ifndef _genom_state_task_definition_c_type
# define _genom_state_task_definition_c_type
struct genom_state_task {
#line 64 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char name[64];
#line 65 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 genom_state_rusage rusage;
#line 66 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 sequence_genom_state_activity activity;
};
#endif /* _genom_state_task_definition_c_type */
#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_genom_state_task_c_type
# define _sequence_genom_state_task_c_type
#line 70 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct sequence_genom_state_task {
  uint32_t _maximum, _length;
  genom_state_task (*_buffer);
  void (*_release)(void *_buffer);
} sequence_genom_state_task;
#endif /* _sequence_genom_state_task_c_type */
#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _genom_state_component_c_type
# define _genom_state_component_c_type
#line 69 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct genom_state_component genom_state_component;
#endif /* _genom_state_component_c_type */

#ifndef _sequence_genom_state_task_c_type
# define _sequence_genom_state_task_c_type
#line 70 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct sequence_genom_state_task {
  uint32_t _maximum, _length;
  genom_state_task (*_buffer);
  void (*_release)(void *_buffer);
} sequence_genom_state_task;
#endif /* _sequence_genom_state_task_c_type */

#ifndef _genom_state_component_definition_c_type
# define _genom_state_component_definition_c_type
struct genom_state_component {
#line 70 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 sequence_genom_state_task task;
#line 72 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char digest[33];
#line 73 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char date[31];
#line 74 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
 char version[32];
};
#endif /* _genom_state_component_definition_c_type */
#include "genom3/c/context.h"

#ifndef _genom_genom_state_c_type
# define _genom_genom_state_c_type
#include "genom3/c/exception.h"
#line 78 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct genom_genom_state {
  genom_state_component * (*data)(genom_context self);
  genom_event (*write)(genom_context self);
} genom_genom_state;
#endif /* _genom_genom_state_c_type */
#include <stdint.h>

#ifndef _pocolibs_metadata_service_c_type
# define _pocolibs_metadata_service_c_type
#line 33 "/home/neoangel/openrobots/share/genom/site-templates/pocolibs/server/metadata.gen"
typedef struct pocolibs_metadata_service pocolibs_metadata_service;
#endif /* _pocolibs_metadata_service_c_type */

#ifndef _pocolibs_metadata_service_definition_c_type
# define _pocolibs_metadata_service_definition_c_type
struct pocolibs_metadata_service {
#line 34 "/home/neoangel/openrobots/share/genom/site-templates/pocolibs/server/metadata.gen"
 int32_t rqstid;
#line 35 "/home/neoangel/openrobots/share/genom/site-templates/pocolibs/server/metadata.gen"
 char name[63];
#line 36 "/home/neoangel/openrobots/share/genom/site-templates/pocolibs/server/metadata.gen"
 char digest[33];
};
#endif /* _pocolibs_metadata_service_definition_c_type */
#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _sequence_pocolibs_metadata_service_c_type
# define _sequence_pocolibs_metadata_service_c_type
#line 40 "/home/neoangel/openrobots/share/genom/site-templates/pocolibs/server/metadata.gen"
typedef struct sequence_pocolibs_metadata_service {
  uint32_t _maximum, _length;
  pocolibs_metadata_service (*_buffer);
  void (*_release)(void *_buffer);
} sequence_pocolibs_metadata_service;
#endif /* _sequence_pocolibs_metadata_service_c_type */
#include <stdint.h>
#include "genom3/c/idlsequence.h"

#ifndef _pocolibs_metadata_component_c_type
# define _pocolibs_metadata_component_c_type
#line 39 "/home/neoangel/openrobots/share/genom/site-templates/pocolibs/server/metadata.gen"
typedef struct pocolibs_metadata_component pocolibs_metadata_component;
#endif /* _pocolibs_metadata_component_c_type */

#ifndef _sequence_pocolibs_metadata_service_c_type
# define _sequence_pocolibs_metadata_service_c_type
#line 40 "/home/neoangel/openrobots/share/genom/site-templates/pocolibs/server/metadata.gen"
typedef struct sequence_pocolibs_metadata_service {
  uint32_t _maximum, _length;
  pocolibs_metadata_service (*_buffer);
  void (*_release)(void *_buffer);
} sequence_pocolibs_metadata_service;
#endif /* _sequence_pocolibs_metadata_service_c_type */

#ifndef _pocolibs_metadata_component_definition_c_type
# define _pocolibs_metadata_component_definition_c_type
struct pocolibs_metadata_component {
#line 40 "/home/neoangel/openrobots/share/genom/site-templates/pocolibs/server/metadata.gen"
 sequence_pocolibs_metadata_service services;
};
#endif /* _pocolibs_metadata_component_definition_c_type */
#include "genom3/c/context.h"

#ifndef _pocolibs_genom_metadata_c_type
# define _pocolibs_genom_metadata_c_type
#include "genom3/c/exception.h"
#line 45 "/home/neoangel/openrobots/share/genom/site-templates/pocolibs/server/metadata.gen"
typedef struct pocolibs_genom_metadata {
  pocolibs_metadata_component * (*data)(genom_context self);
  genom_event (*write)(genom_context self);
} pocolibs_genom_metadata;
#endif /* _pocolibs_genom_metadata_c_type */
#include <stdint.h>

#ifndef _loco_move_task_period_c_type
# define _loco_move_task_period_c_type
#line 6 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
static const uint32_t loco_move_task_period = 50;
#endif /* _loco_move_task_period_c_type */
#include <stdint.h>

#ifndef _loco_batt_task_period_c_type
# define _loco_batt_task_period_c_type
#line 7 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
static const uint32_t loco_batt_task_period = 100;
#endif /* _loco_batt_task_period_c_type */

#ifndef _loco_millisecond_c_type
# define _loco_millisecond_c_type
#line 9 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
static const float loco_millisecond = 0.001;
#endif /* _loco_millisecond_c_type */
#include <stdint.h>

#ifndef _loco_long_wcet_c_type
# define _loco_long_wcet_c_type
#line 11 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
static const uint32_t loco_long_wcet = 10;
#endif /* _loco_long_wcet_c_type */
#include <stdint.h>

#ifndef _loco_short_wcet_c_type
# define _loco_short_wcet_c_type
#line 12 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
static const uint32_t loco_short_wcet = 2;
#endif /* _loco_short_wcet_c_type */
#include <stdint.h>

#ifndef _loco_control_wcet_c_type
# define _loco_control_wcet_c_type
#line 13 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
static const uint32_t loco_control_wcet = 1;
#endif /* _loco_control_wcet_c_type */

#ifndef _loco_data_c_type
# define _loco_data_c_type
#line 16 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
typedef struct loco_data loco_data;
#endif /* _loco_data_c_type */

#ifndef _loco_data_definition_c_type
# define _loco_data_definition_c_type
struct loco_data {
#line 17 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
 float nombre;
};
#endif /* _loco_data_definition_c_type */
#include <stdint.h>

#ifndef _loco_dir_moteur_enum_c_type
# define _loco_dir_moteur_enum_c_type
#line 21 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
typedef uint32_t loco_dir_moteur_enum;
enum {
#line 22 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
  loco_AVANT =	0,
#line 22 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
  loco_ARRIERE =	1,
#line 22 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
  loco_STOP =	2
};
#endif /* _loco_dir_moteur_enum_c_type */

#ifndef _loco_direction_moteur_c_type
# define _loco_direction_moteur_c_type
#line 25 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
typedef struct loco_direction_moteur loco_direction_moteur;
#endif /* _loco_direction_moteur_c_type */

#ifndef _loco_direction_moteur_definition_c_type
# define _loco_direction_moteur_definition_c_type
struct loco_direction_moteur {
#line 26 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
 loco_dir_moteur_enum direction;
};
#endif /* _loco_direction_moteur_definition_c_type */

#ifndef _loco_motor_c_type
# define _loco_motor_c_type
#line 29 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
typedef struct loco_motor loco_motor;
#endif /* _loco_motor_c_type */

#ifndef _loco_motor_definition_c_type
# define _loco_motor_definition_c_type
struct loco_motor {
#line 30 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
 loco_direction_moteur moteur_gauche;
#line 31 "/home/neoangel/work/Projet_2A/Loco/loco-struct.idl"
 loco_direction_moteur moteur_droit;
};
#endif /* _loco_motor_definition_c_type */
#include <stdint.h>

#ifndef _camera_film_task_period_c_type
# define _camera_film_task_period_c_type
#line 6 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
static const uint32_t camera_film_task_period = 100;
#endif /* _camera_film_task_period_c_type */

#ifndef _camera_map_c_type
# define _camera_map_c_type
#line 8 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
typedef struct camera_map camera_map;
#endif /* _camera_map_c_type */

#ifndef _camera_map_definition_c_type
# define _camera_map_definition_c_type
struct camera_map {
#line 9 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
 float R;
#line 10 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
 float G;
#line 11 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
 float B;
};
#endif /* _camera_map_definition_c_type */

#ifndef _camera_coin_c_type
# define _camera_coin_c_type
#line 15 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
typedef struct camera_coin camera_coin;
#endif /* _camera_coin_c_type */

#ifndef _camera_coin_definition_c_type
# define _camera_coin_definition_c_type
struct camera_coin {
#line 16 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
 float x;
#line 17 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
 float y;
};
#endif /* _camera_coin_definition_c_type */

#ifndef _camera_arena_c_type
# define _camera_arena_c_type
#line 20 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
typedef struct camera_arena camera_arena;
#endif /* _camera_arena_c_type */

#ifndef _camera_arena_definition_c_type
# define _camera_arena_definition_c_type
struct camera_arena {
#line 21 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
 camera_coin haut_gauche;
#line 22 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
 camera_coin haut_droit;
#line 23 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
 camera_coin bas_gauche;
#line 24 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
 camera_coin bas_droit;
};
#endif /* _camera_arena_definition_c_type */

#ifndef _camera_robot_c_type
# define _camera_robot_c_type
#line 28 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
typedef struct camera_robot camera_robot;
#endif /* _camera_robot_c_type */

#ifndef _camera_robot_definition_c_type
# define _camera_robot_definition_c_type
struct camera_robot {
#line 29 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
 camera_coin position_avant;
#line 30 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
 camera_coin position_arriere_gauche;
#line 31 "/home/neoangel/work/Projet_2A/Camera/camera-struct.idl"
 camera_coin position_arriere_droit;
};
#endif /* _camera_robot_definition_c_type */
#include <stdint.h>

#ifndef _display_monitor_task_period_c_type
# define _display_monitor_task_period_c_type
#line 6 "/home/neoangel/work/Projet_2A/Display/display-struct.idl"
static const uint32_t display_monitor_task_period = 100;
#endif /* _display_monitor_task_period_c_type */
#include <stdint.h>

#ifndef _display_order_enum_c_type
# define _display_order_enum_c_type
#line 8 "/home/neoangel/work/Projet_2A/Display/display-struct.idl"
typedef uint32_t display_order_enum;
enum {
#line 9 "/home/neoangel/work/Projet_2A/Display/display-struct.idl"
  display_UP =	0,
#line 9 "/home/neoangel/work/Projet_2A/Display/display-struct.idl"
  display_DOWN =	1,
#line 9 "/home/neoangel/work/Projet_2A/Display/display-struct.idl"
  display_LEFT =	2,
#line 9 "/home/neoangel/work/Projet_2A/Display/display-struct.idl"
  display_RIGHT =	3,
#line 9 "/home/neoangel/work/Projet_2A/Display/display-struct.idl"
  display_STOP =	4
};
#endif /* _display_order_enum_c_type */

#ifndef _display_order_c_type
# define _display_order_c_type
#line 12 "/home/neoangel/work/Projet_2A/Display/display-struct.idl"
typedef struct display_order display_order;
#endif /* _display_order_c_type */

#ifndef _display_order_definition_c_type
# define _display_order_definition_c_type
struct display_order {
#line 13 "/home/neoangel/work/Projet_2A/Display/display-struct.idl"
 display_order_enum order;
};
#endif /* _display_order_definition_c_type */

#ifndef _loco_ether_c_type
# define _loco_ether_c_type
#include "genom3/c/exception.h"
#line 7 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
const char genom_extern_weak loco_ether[] = "::loco::ether";
#endif /* _loco_ether_c_type */

#ifndef _loco_start_c_type
# define _loco_start_c_type
#include "genom3/c/exception.h"
#line 7 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
const char genom_extern_weak loco_start[] = "::loco::start";
#endif /* _loco_start_c_type */

#ifndef _loco_stop_c_type
# define _loco_stop_c_type
#include "genom3/c/exception.h"
#line 7 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
const char genom_extern_weak loco_stop[] = "::loco::stop";
#endif /* _loco_stop_c_type */
#include "genom3/c/context.h"

#ifndef _loco_genom_state_c_type
# define _loco_genom_state_c_type
#include "genom3/c/exception.h"
#line 78 "/home/neoangel/openrobots/share/genom/templates/common/genom.gen"
typedef struct loco_genom_state {
  genom_state_component * (*data)(genom_context self);
  genom_event (*write)(genom_context self);
} loco_genom_state;
#endif /* _loco_genom_state_c_type */
#include "genom3/c/context.h"

#ifndef _loco_genom_metadata_c_type
# define _loco_genom_metadata_c_type
#include "genom3/c/exception.h"
#line 45 "/home/neoangel/openrobots/share/genom/site-templates/pocolibs/server/metadata.gen"
typedef struct loco_genom_metadata {
  pocolibs_metadata_component * (*data)(genom_context self);
  genom_event (*write)(genom_context self);
} loco_genom_metadata;
#endif /* _loco_genom_metadata_c_type */

#ifndef _loco_ids_c_type
# define _loco_ids_c_type
#line 13 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
typedef struct loco_ids loco_ids;
#endif /* _loco_ids_c_type */

#ifndef _loco_ids_definition_c_type
# define _loco_ids_definition_c_type
struct loco_ids {
#line 14 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
 display_order command;
#line 15 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
 camera_map image;
#line 16 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
 camera_arena arene;
#line 17 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
 camera_robot position;
#line 18 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
 loco_data batterie;
#line 19 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
 loco_motor moteur;
};
#endif /* _loco_ids_definition_c_type */
#include "genom3/c/context.h"

#ifndef _loco_INVALID_ORDER_c_type
# define _loco_INVALID_ORDER_c_type
#include "genom3/c/exception.h"
#line 22 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
const char genom_extern_weak loco_INVALID_ORDER_id[] = "::loco::INVALID_ORDER";
#line 22 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
typedef void loco_INVALID_ORDER_detail;
#endif /* _loco_INVALID_ORDER_c_type */

#ifndef _loco_INVALID_ORDER_definition_c_type
# define _loco_INVALID_ORDER_definition_c_type
static inline genom_event
loco_INVALID_ORDER(genom_context self) {
 return self->raise(loco_INVALID_ORDER_id, NULL, 0, self);
}
#endif /* _loco_INVALID_ORDER_definition_c_type */
#include "genom3/c/context.h"

#ifndef _loco_INVALID_DATA_c_type
# define _loco_INVALID_DATA_c_type
#include "genom3/c/exception.h"
#line 22 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
const char genom_extern_weak loco_INVALID_DATA_id[] = "::loco::INVALID_DATA";
#line 22 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
typedef void loco_INVALID_DATA_detail;
#endif /* _loco_INVALID_DATA_c_type */

#ifndef _loco_INVALID_DATA_definition_c_type
# define _loco_INVALID_DATA_definition_c_type
static inline genom_event
loco_INVALID_DATA(genom_context self) {
 return self->raise(loco_INVALID_DATA_id, NULL, 0, self);
}
#endif /* _loco_INVALID_DATA_definition_c_type */
#include "genom3/c/context.h"

#ifndef _loco_JS_c_type
# define _loco_JS_c_type
#include "genom3/c/exception.h"
#line 26 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
typedef struct loco_JS {
  display_order * (*data)(genom_context self);
  genom_event (*read)(genom_context self);
} loco_JS;
#endif /* _loco_JS_c_type */
#include "genom3/c/context.h"

#ifndef _loco_AR_c_type
# define _loco_AR_c_type
#include "genom3/c/exception.h"
#line 27 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
typedef struct loco_AR {
  camera_arena * (*data)(genom_context self);
  genom_event (*read)(genom_context self);
} loco_AR;
#endif /* _loco_AR_c_type */
#include "genom3/c/context.h"

#ifndef _loco_POS_c_type
# define _loco_POS_c_type
#include "genom3/c/exception.h"
#line 28 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
typedef struct loco_POS {
  camera_robot * (*data)(genom_context self);
  genom_event (*read)(genom_context self);
} loco_POS;
#endif /* _loco_POS_c_type */
#include "genom3/c/context.h"

#ifndef _loco_BAT_c_type
# define _loco_BAT_c_type
#include "genom3/c/exception.h"
#line 29 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
typedef struct loco_BAT {
  loco_data * (*data)(genom_context self);
  genom_event (*write)(genom_context self);
} loco_BAT;
#endif /* _loco_BAT_c_type */

#ifndef _loco_moteur_c_type
# define _loco_moteur_c_type
#include "genom3/c/exception.h"
#line 86 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
const char genom_extern_weak loco_moteur[] = "::loco::moteur";
#endif /* _loco_moteur_c_type */

#ifndef _loco_compute_speed_c_type
# define _loco_compute_speed_c_type
#include "genom3/c/exception.h"
#line 87 "/home/neoangel/work/Projet_2A/Loco/loco.gen"
const char genom_extern_weak loco_compute_speed[] = "::loco::compute_speed";
#endif /* _loco_compute_speed_c_type */


/* Codel functions signatures*/

genom_event InitMoveParameters(loco_motor *moteur, const genom_context self);
genom_event InitBattParameters(loco_data *batterie, const genom_context self);


genom_event genom_abort_activity_codel(uint32_t activity,
                           const genom_context self);
genom_event genom_connect_port_codel(const char local[128], const char remote[128],
                         const genom_context self);
genom_event genom_connect_remote_codel(const char local[128],
                           const char remote[128],
                           const genom_context self);
genom_event genom_kill_codel(const genom_context self);
genom_event MoveStart(const loco_JS *JS, const loco_AR *AR, const loco_POS *POS,
          const genom_context self);
genom_event MoveMot(const loco_JS *JS, loco_motor *moteur,
        const genom_context self);
genom_event MoveSpeed(const loco_motor *moteur, const genom_context self);
genom_event BatteryStart(const loco_data *batterie, const loco_BAT *BAT,
             const genom_context self);
