/* --- Generated by genom 2.99.29. Do not edit -------------------------- */


/* C99 standard specifies that format macros must be explicitly requested */
#define __STDC_FORMAT_MACROS

#include <errno.h>
#include <inttypes.h>
#include <limits.h>
#include <math.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


/* --- local data ---------------------------------------------------------- */

#define JSON_MINBUF	128

static int	bufcat(char **buf, char **end, size_t *len, int quoted,
                       const char *data);
static int	bufcat_uint64_t(char **buf, char **end, size_t *len, int neg,
                                uint64_t i) __attribute__ ((unused));

static __inline__ int	json_scan_string64(
  char[64], const char **);
static __inline__ int	json_print_string64(char **, char **, size_t *,
  const char[64]);
static __inline__ int	json_scan_unsigned_long(
  uint32_t *, const char **);
static __inline__ int	json_print_unsigned_long(char **, char **, size_t *,
  uint32_t);
static __inline__ int	json_scan_float(
  float *, const char **);
static __inline__ int	json_print_float(char **, char **, size_t *,
  float);
static __inline__ int	json_scan_t_genom_state_stats(
  genom_state_stats *, const char **);
static __inline__ int	json_print_t_genom_state_stats(char **, char **, size_t *,
  const genom_state_stats *);
static __inline__ int	json_scan_t_genom_state_rusage(
  genom_state_rusage *, const char **);
static __inline__ int	json_print_t_genom_state_rusage(char **, char **, size_t *,
  const genom_state_rusage *);
static __inline__ int	json_scan_t_genom_state_activity(
  genom_state_activity *, const char **);
static __inline__ int	json_print_t_genom_state_activity(char **, char **, size_t *,
  const genom_state_activity *);
static __inline__ int	json_scan_sequence_t_genom_state_activity(
  sequence_genom_state_activity *, const char **);
static __inline__ int	json_print_sequence_t_genom_state_activity(char **, char **, size_t *,
  const sequence_genom_state_activity *);
static __inline__ int	json_scan_t_genom_state_task(
  genom_state_task *, const char **);
static __inline__ int	json_print_t_genom_state_task(char **, char **, size_t *,
  const genom_state_task *);
static __inline__ int	json_scan_sequence_t_genom_state_task(
  sequence_genom_state_task *, const char **);
static __inline__ int	json_print_sequence_t_genom_state_task(char **, char **, size_t *,
  const sequence_genom_state_task *);
static __inline__ int	json_scan_string33(
  char[33], const char **);
static __inline__ int	json_print_string33(char **, char **, size_t *,
  const char[33]);
static __inline__ int	json_scan_string31(
  char[31], const char **);
static __inline__ int	json_print_string31(char **, char **, size_t *,
  const char[31]);
static __inline__ int	json_scan_string32(
  char[32], const char **);
static __inline__ int	json_print_string32(char **, char **, size_t *,
  const char[32]);
static __inline__ int	json_scan_t_genom_state_component(
  genom_state_component *, const char **);
static __inline__ int	json_print_t_genom_state_component(char **, char **, size_t *,
  const genom_state_component *);
static __inline__ int	json_scan_t_display_order_enum(
  display_order_enum *, const char **);
static __inline__ int	json_print_t_display_order_enum(char **, char **, size_t *,
  display_order_enum);
static __inline__ int	json_scan_t_display_order(
  display_order *, const char **);
static __inline__ int	json_print_t_display_order(char **, char **, size_t *,
  const display_order *);
static __inline__ int	json_scan_t_camera_coin(
  camera_coin *, const char **);
static __inline__ int	json_print_t_camera_coin(char **, char **, size_t *,
  const camera_coin *);
static __inline__ int	json_scan_t_camera_arena(
  camera_arena *, const char **);
static __inline__ int	json_print_t_camera_arena(char **, char **, size_t *,
  const camera_arena *);
static __inline__ int	json_scan_t_camera_robot(
  camera_robot *, const char **);
static __inline__ int	json_print_t_camera_robot(char **, char **, size_t *,
  const camera_robot *);
static __inline__ int	json_scan_t_loco_data(
  loco_data *, const char **);
static __inline__ int	json_print_t_loco_data(char **, char **, size_t *,
  const loco_data *);
static __inline__ int	json_scan_t_genom_incompatible_digest_client_digest(
  genom_incompatible_digest_client_digest *, const char **);
static __inline__ int	json_print_t_genom_incompatible_digest_client_digest(char **, char **, size_t *,
  const genom_incompatible_digest_client_digest *);
static __inline__ int	json_scan_t_genom_incompatible_digest_server_digest(
  genom_incompatible_digest_server_digest *, const char **);
static __inline__ int	json_print_t_genom_incompatible_digest_server_digest(char **, char **, size_t *,
  const genom_incompatible_digest_server_digest *);
static __inline__ int	json_scan_t_genom_incompatible_digest(
  genom_incompatible_digest_detail *, const char **);
static __inline__ int	json_print_t_genom_incompatible_digest(char **, char **, size_t *,
  const genom_incompatible_digest_detail *);
static __inline__ int	json_scan_string128(
  char[128], const char **);
static __inline__ int	json_print_string128(char **, char **, size_t *,
  const char[128]);
static __inline__ int	json_scan_t_genom_bad_transition(
  genom_bad_transition_detail *, const char **);
static __inline__ int	json_print_t_genom_bad_transition(char **, char **, size_t *,
  const genom_bad_transition_detail *);
static __inline__ int	json_scan_t_genom_interrupted(
  genom_interrupted_detail *, const char **);
static __inline__ int	json_print_t_genom_interrupted(char **, char **, size_t *,
  const genom_interrupted_detail *);
static __inline__ int	json_scan_t_genom_serialization(
  genom_serialization_detail *, const char **);
static __inline__ int	json_print_t_genom_serialization(char **, char **, size_t *,
  const genom_serialization_detail *);
static __inline__ int	json_scan_t_genom_too_many_activities(
  genom_too_many_activities_detail *, const char **);
static __inline__ int	json_print_t_genom_too_many_activities(char **, char **, size_t *,
  const genom_too_many_activities_detail *);
static __inline__ int	json_scan_t_genom_disallowed(
  genom_disallowed_detail *, const char **);
static __inline__ int	json_print_t_genom_disallowed(char **, char **, size_t *,
  const genom_disallowed_detail *);
static __inline__ int	json_scan_string256(
  char[256], const char **);
static __inline__ int	json_print_string256(char **, char **, size_t *,
  const char[256]);
static __inline__ int	json_scan_t_genom_mwerr(
  genom_mwerr_detail *, const char **);
static __inline__ int	json_print_t_genom_mwerr(char **, char **, size_t *,
  const genom_mwerr_detail *);
static __inline__ int	json_scan_t_genom_no_such_activity(
  genom_no_such_activity_detail *, const char **);
static __inline__ int	json_print_t_genom_no_such_activity(char **, char **, size_t *,
  const genom_no_such_activity_detail *);
static __inline__ int	json_scan_t_genom_no_such_inport(
  genom_no_such_inport_detail *, const char **);
static __inline__ int	json_print_t_genom_no_such_inport(char **, char **, size_t *,
  const genom_no_such_inport_detail *);
static __inline__ int	json_scan_t_genom_no_such_outport(
  genom_no_such_outport_detail *, const char **);
static __inline__ int	json_print_t_genom_no_such_outport(char **, char **, size_t *,
  const genom_no_such_outport_detail *);
static __inline__ int	json_scan_t_genom_port_io(
  genom_port_io_detail *, const char **);
static __inline__ int	json_print_t_genom_port_io(char **, char **, size_t *,
  const genom_port_io_detail *);
static __inline__ int	json_scan_t_genom_no_such_remote(
  genom_no_such_remote_detail *, const char **);
static __inline__ int	json_print_t_genom_no_such_remote(char **, char **, size_t *,
  const genom_no_such_remote_detail *);
static __inline__ int	json_scan_t_genom_no_such_service(
  genom_no_such_service_detail *, const char **);
static __inline__ int	json_print_t_genom_no_such_service(char **, char **, size_t *,
  const genom_no_such_service_detail *);
static __inline__ int	json_scan_t_genom_remote_io(
  genom_remote_io_detail *, const char **);
static __inline__ int	json_print_t_genom_remote_io(char **, char **, size_t *,
  const genom_remote_io_detail *);
static __inline__ int	json_scan_t_camera_map(
  camera_map *, const char **);
static __inline__ int	json_print_t_camera_map(char **, char **, size_t *,
  const camera_map *);
static __inline__ int	json_scan_t_loco_INVALID_ORDER(
  loco_INVALID_ORDER_detail *, const char **);
static __inline__ int	json_print_t_loco_INVALID_ORDER(char **, char **, size_t *,
  const loco_INVALID_ORDER_detail *);
static __inline__ int	json_scan_t_loco_INVALID_DATA(
  loco_INVALID_DATA_detail *, const char **);
static __inline__ int	json_print_t_loco_INVALID_DATA(char **, char **, size_t *,
  const loco_INVALID_DATA_detail *);

#define json_skip_whitespace(json) (json) += strspn(json, " \t\n\r")


/* === string64 ========================================================= */

static __inline__ int
json_scan_string64(char data[64], const char **json)
{
  int s = 0;
  const char *d;
  char *p;

  json_skip_whitespace(*json);
  if (**json != '"') return EINVAL;
  d = ++(*json);
  while (**json != '"') {
    if (**json == '\\') (*json)++;
    (*json)++;
  }
  if (*json - d + 1 > 64) return EINVAL;
  strncpy(data, d, *json - d);
  data[*json - d] = '\0';
  p = data;
  while((p = strstr(p, "\\"))) {
    if (*p == '"' || *p == '\\')
      memmove(p, p+1, strlen(p)/*including final \0*/);
    p++;
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_string64(char **json, char **end, size_t *len,
  const char data[64])
{
  int s;
  if ((s = bufcat(json, end, len, 0, "\""))) return s;
  if ((s = bufcat(json, end, len, 1, data))) return s;
  if ((s = bufcat(json, end, len, 0, "\""))) return s;
  return 0;
}

/* === unsigned_long ==================================================== */

static __inline__ int
json_scan_unsigned_long(uint32_t *data, const char **json)
{
  int s = 0;
  long long v;
  char *d;

  v = strtoll(*json, &d, 0);
  if (d == *json) return EINVAL;
  *json = d;
  *(data) = (uint32_t)v;
  return s;
}

static __inline__ int
json_print_unsigned_long(char **json, char **end, size_t *len,
  uint32_t data)
{
  int s;
  uint64_t v = data;
  if ((s = bufcat_uint64_t(json, end, len, 0, v))) return s;
  return 0;
}

/* === float ============================================================ */

static __inline__ int
json_scan_float(float *data, const char **json)
{
  int s = 0;
  double v;

  if (!strncmp(*json, "null", 4)) {
    (*json) += 4;
    *data = (float)nan("");
  } else {
    char *d;
    v = strtod(*json, &d);
    if (d == *json) return EINVAL;
    *json = d;
    *data = (float)v;
  }
  return s;
}

static __inline__ int
json_print_float(char **json, char **end, size_t *len,
  float data)
{
  int s;
  if (isnan(data)) {
    if ((s = bufcat(json, end, len, 0, "null"))) return s;
  } else {
    char buf[32];
    sprintf(buf, "%g", data);
    if ((s = bufcat(json, end, len, 0, buf))) return s;
  }
  return 0;
}

/* === t_genom_state_stats ============================================== */

static __inline__ int
json_scan_t_genom_state_stats(genom_state_stats *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "last\"", 1+4)) {
      (*json)+= 1+4;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_float(
             &(data->last), json))) return s;
    } else
    if (!strncmp(*json, "max\"", 1+3)) {
      (*json)+= 1+3;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_float(
             &(data->max), json))) return s;
    } else
    if (!strncmp(*json, "avg\"", 1+3)) {
      (*json)+= 1+3;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_float(
             &(data->avg), json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_state_stats(char **json, char **end, size_t *len,
  const genom_state_stats *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"last\":"))) return s;
  if ((s = json_print_float(json, end, len,
         data->last))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"max\":"))) return s;
  if ((s = json_print_float(json, end, len,
         data->max))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"avg\":"))) return s;
  if ((s = json_print_float(json, end, len,
         data->avg))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_state_rusage ============================================= */

static __inline__ int
json_scan_t_genom_state_rusage(genom_state_rusage *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "cycles\"", 1+6)) {
      (*json)+= 1+6;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_unsigned_long(
             &(data->cycles), json))) return s;
    } else
    if (!strncmp(*json, "timings\"", 1+7)) {
      (*json)+= 1+7;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_genom_state_stats(
             &(data->timings), json))) return s;
    } else
    if (!strncmp(*json, "load\"", 1+4)) {
      (*json)+= 1+4;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_genom_state_stats(
             &(data->load), json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_state_rusage(char **json, char **end, size_t *len,
  const genom_state_rusage *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"cycles\":"))) return s;
  if ((s = json_print_unsigned_long(json, end, len,
         data->cycles))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"timings\":"))) return s;
  if ((s = json_print_t_genom_state_stats(json, end, len,
         &(data->timings)))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"load\":"))) return s;
  if ((s = json_print_t_genom_state_stats(json, end, len,
         &(data->load)))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_state_activity =========================================== */

static __inline__ int
json_scan_t_genom_state_activity(genom_state_activity *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "id\"", 1+2)) {
      (*json)+= 1+2;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_unsigned_long(
             &(data->id), json))) return s;
    } else
    if (!strncmp(*json, "name\"", 1+4)) {
      (*json)+= 1+4;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string64(
             data->name, json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_state_activity(char **json, char **end, size_t *len,
  const genom_state_activity *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"id\":"))) return s;
  if ((s = json_print_unsigned_long(json, end, len,
         data->id))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"name\":"))) return s;
  if ((s = json_print_string64(json, end, len,
         data->name))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === sequence_t_genom_state_activity ================================== */

static __inline__ int
json_scan_sequence_t_genom_state_activity(sequence_genom_state_activity *data, const char **json)
{
  int s = 0;
  long i;

  json_skip_whitespace(*json);
  switch (*((*json)++)) {
    case '[':
      json_skip_whitespace(*json);
      i = 0;
      while(**json != ']') {
        if ((s = genom_sequence_reserve(data, i+1))) return s;
        if ((s = json_scan_t_genom_state_activity(
             &(data->_buffer[i]), json)))
          return s;
        data->_length = ++i;
        json_skip_whitespace(*json);
        if (**json == ',') {
          (*json)++;
          json_skip_whitespace(*json);
        }
      }
      break;

    case '{':
      json_skip_whitespace(*json);
      while(**json != '}') {
        char *d;

        if (*((*json)++) != '"') return EINVAL;
        i = strtol(*json, &d, 0);
        if (d == *json || *d != '"' || i<0) return EINVAL;
        *json = d+1;
        json_skip_whitespace(*json);
        if (*((*json)++) != ':') return EINVAL;
        if (data->_length < (unsigned long)i+1) {
          if ((s = genom_sequence_reserve(data, i+1))) return s;
        }
        if ((s = json_scan_t_genom_state_activity(
             &(data->_buffer[i]), json)))
          return s;
        if (data->_length < (unsigned long)i+1) data->_length = i+1;
        json_skip_whitespace(*json);
        if (**json == ',') {
          (*json)++;
          json_skip_whitespace(*json);
        }
      }
      break;

    default: return EINVAL;
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_sequence_t_genom_state_activity(char **json, char **end, size_t *len,
  const sequence_genom_state_activity *data)
{
  int s;
  size_t i;
  if ((s = bufcat(json, end, len, 0, "["))) return s;
  for (i=0; i<data->_length; i++) {
    if (i && (s = bufcat(json, end, len, 0, ","))) return s;
    if ((s = json_print_t_genom_state_activity(json, end, len,
           &(data->_buffer[i])))) return s;
  }
  if ((s = bufcat(json, end, len, 0, "]"))) return s;
  return 0;
}

/* === t_genom_state_task =============================================== */

static __inline__ int
json_scan_t_genom_state_task(genom_state_task *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "name\"", 1+4)) {
      (*json)+= 1+4;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string64(
             data->name, json))) return s;
    } else
    if (!strncmp(*json, "rusage\"", 1+6)) {
      (*json)+= 1+6;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_genom_state_rusage(
             &(data->rusage), json))) return s;
    } else
    if (!strncmp(*json, "activity\"", 1+8)) {
      (*json)+= 1+8;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_sequence_t_genom_state_activity(
             &(data->activity), json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_state_task(char **json, char **end, size_t *len,
  const genom_state_task *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"name\":"))) return s;
  if ((s = json_print_string64(json, end, len,
         data->name))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"rusage\":"))) return s;
  if ((s = json_print_t_genom_state_rusage(json, end, len,
         &(data->rusage)))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"activity\":"))) return s;
  if ((s = json_print_sequence_t_genom_state_activity(json, end, len,
         &(data->activity)))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === sequence_t_genom_state_task ====================================== */

static __inline__ int
json_scan_sequence_t_genom_state_task(sequence_genom_state_task *data, const char **json)
{
  int s = 0;
  long i;

  json_skip_whitespace(*json);
  switch (*((*json)++)) {
    case '[':
      json_skip_whitespace(*json);
      i = 0;
      while(**json != ']') {
        if ((s = genom_sequence_reserve(data, i+1))) return s;
        if ((s = json_scan_t_genom_state_task(
             &(data->_buffer[i]), json)))
          return s;
        data->_length = ++i;
        json_skip_whitespace(*json);
        if (**json == ',') {
          (*json)++;
          json_skip_whitespace(*json);
        }
      }
      break;

    case '{':
      json_skip_whitespace(*json);
      while(**json != '}') {
        char *d;

        if (*((*json)++) != '"') return EINVAL;
        i = strtol(*json, &d, 0);
        if (d == *json || *d != '"' || i<0) return EINVAL;
        *json = d+1;
        json_skip_whitespace(*json);
        if (*((*json)++) != ':') return EINVAL;
        if (data->_length < (unsigned long)i+1) {
          if ((s = genom_sequence_reserve(data, i+1))) return s;
        }
        if ((s = json_scan_t_genom_state_task(
             &(data->_buffer[i]), json)))
          return s;
        if (data->_length < (unsigned long)i+1) data->_length = i+1;
        json_skip_whitespace(*json);
        if (**json == ',') {
          (*json)++;
          json_skip_whitespace(*json);
        }
      }
      break;

    default: return EINVAL;
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_sequence_t_genom_state_task(char **json, char **end, size_t *len,
  const sequence_genom_state_task *data)
{
  int s;
  size_t i;
  if ((s = bufcat(json, end, len, 0, "["))) return s;
  for (i=0; i<data->_length; i++) {
    if (i && (s = bufcat(json, end, len, 0, ","))) return s;
    if ((s = json_print_t_genom_state_task(json, end, len,
           &(data->_buffer[i])))) return s;
  }
  if ((s = bufcat(json, end, len, 0, "]"))) return s;
  return 0;
}

/* === string33 ========================================================= */

static __inline__ int
json_scan_string33(char data[33], const char **json)
{
  int s = 0;
  const char *d;
  char *p;

  json_skip_whitespace(*json);
  if (**json != '"') return EINVAL;
  d = ++(*json);
  while (**json != '"') {
    if (**json == '\\') (*json)++;
    (*json)++;
  }
  if (*json - d + 1 > 33) return EINVAL;
  strncpy(data, d, *json - d);
  data[*json - d] = '\0';
  p = data;
  while((p = strstr(p, "\\"))) {
    if (*p == '"' || *p == '\\')
      memmove(p, p+1, strlen(p)/*including final \0*/);
    p++;
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_string33(char **json, char **end, size_t *len,
  const char data[33])
{
  int s;
  if ((s = bufcat(json, end, len, 0, "\""))) return s;
  if ((s = bufcat(json, end, len, 1, data))) return s;
  if ((s = bufcat(json, end, len, 0, "\""))) return s;
  return 0;
}

/* === string31 ========================================================= */

static __inline__ int
json_scan_string31(char data[31], const char **json)
{
  int s = 0;
  const char *d;
  char *p;

  json_skip_whitespace(*json);
  if (**json != '"') return EINVAL;
  d = ++(*json);
  while (**json != '"') {
    if (**json == '\\') (*json)++;
    (*json)++;
  }
  if (*json - d + 1 > 31) return EINVAL;
  strncpy(data, d, *json - d);
  data[*json - d] = '\0';
  p = data;
  while((p = strstr(p, "\\"))) {
    if (*p == '"' || *p == '\\')
      memmove(p, p+1, strlen(p)/*including final \0*/);
    p++;
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_string31(char **json, char **end, size_t *len,
  const char data[31])
{
  int s;
  if ((s = bufcat(json, end, len, 0, "\""))) return s;
  if ((s = bufcat(json, end, len, 1, data))) return s;
  if ((s = bufcat(json, end, len, 0, "\""))) return s;
  return 0;
}

/* === string32 ========================================================= */

static __inline__ int
json_scan_string32(char data[32], const char **json)
{
  int s = 0;
  const char *d;
  char *p;

  json_skip_whitespace(*json);
  if (**json != '"') return EINVAL;
  d = ++(*json);
  while (**json != '"') {
    if (**json == '\\') (*json)++;
    (*json)++;
  }
  if (*json - d + 1 > 32) return EINVAL;
  strncpy(data, d, *json - d);
  data[*json - d] = '\0';
  p = data;
  while((p = strstr(p, "\\"))) {
    if (*p == '"' || *p == '\\')
      memmove(p, p+1, strlen(p)/*including final \0*/);
    p++;
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_string32(char **json, char **end, size_t *len,
  const char data[32])
{
  int s;
  if ((s = bufcat(json, end, len, 0, "\""))) return s;
  if ((s = bufcat(json, end, len, 1, data))) return s;
  if ((s = bufcat(json, end, len, 0, "\""))) return s;
  return 0;
}

/* === t_genom_state_component ========================================== */

static __inline__ int
json_scan_t_genom_state_component(genom_state_component *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "task\"", 1+4)) {
      (*json)+= 1+4;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_sequence_t_genom_state_task(
             &(data->task), json))) return s;
    } else
    if (!strncmp(*json, "digest\"", 1+6)) {
      (*json)+= 1+6;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string33(
             data->digest, json))) return s;
    } else
    if (!strncmp(*json, "date\"", 1+4)) {
      (*json)+= 1+4;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string31(
             data->date, json))) return s;
    } else
    if (!strncmp(*json, "version\"", 1+7)) {
      (*json)+= 1+7;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string32(
             data->version, json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_state_component(char **json, char **end, size_t *len,
  const genom_state_component *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"task\":"))) return s;
  if ((s = json_print_sequence_t_genom_state_task(json, end, len,
         &(data->task)))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"digest\":"))) return s;
  if ((s = json_print_string33(json, end, len,
         data->digest))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"date\":"))) return s;
  if ((s = json_print_string31(json, end, len,
         data->date))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"version\":"))) return s;
  if ((s = json_print_string32(json, end, len,
         data->version))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_display_order_enum ============================================= */

static __inline__ int
json_scan_t_display_order_enum(display_order_enum *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '"') return EINVAL;
  if (!strncmp(*json, "::display::UP\"",
               1+13)) {
    (*json)+= 1+13;
    *data = display_UP;
  } else
    if (!strncmp(*json, "UP\"", 1+2)) {
    (*json)+= 1+2;
    *data = display_UP;
  } else
  if (!strncmp(*json, "::display::DOWN\"",
               1+15)) {
    (*json)+= 1+15;
    *data = display_DOWN;
  } else
    if (!strncmp(*json, "DOWN\"", 1+4)) {
    (*json)+= 1+4;
    *data = display_DOWN;
  } else
  if (!strncmp(*json, "::display::LEFT\"",
               1+15)) {
    (*json)+= 1+15;
    *data = display_LEFT;
  } else
    if (!strncmp(*json, "LEFT\"", 1+4)) {
    (*json)+= 1+4;
    *data = display_LEFT;
  } else
  if (!strncmp(*json, "::display::RIGHT\"",
               1+16)) {
    (*json)+= 1+16;
    *data = display_RIGHT;
  } else
    if (!strncmp(*json, "RIGHT\"", 1+5)) {
    (*json)+= 1+5;
    *data = display_RIGHT;
  } else
  if (!strncmp(*json, "::display::STOP\"",
               1+15)) {
    (*json)+= 1+15;
    *data = display_STOP;
  } else
    if (!strncmp(*json, "STOP\"", 1+4)) {
    (*json)+= 1+4;
    *data = display_STOP;
  } else
    if (!strncmp(*json, "<invalid>\"", sizeof("<invalid>"))) {
    (*json)+= sizeof("<invalid>");
    *data = (display_order_enum)-1 /*any invalid value*/;
  } else
    return EINVAL;
  return s;
}

static __inline__ int
json_print_t_display_order_enum(char **json, char **end, size_t *len,
  display_order_enum data)
{
  int s;
  switch(data) {
    case display_UP:
      if ((s = bufcat(json, end, len, 0, "\"::display::UP\""))) return s;
      break;
    case display_DOWN:
      if ((s = bufcat(json, end, len, 0, "\"::display::DOWN\""))) return s;
      break;
    case display_LEFT:
      if ((s = bufcat(json, end, len, 0, "\"::display::LEFT\""))) return s;
      break;
    case display_RIGHT:
      if ((s = bufcat(json, end, len, 0, "\"::display::RIGHT\""))) return s;
      break;
    case display_STOP:
      if ((s = bufcat(json, end, len, 0, "\"::display::STOP\""))) return s;
      break;
    default:
      if ((s = bufcat(json, end, len, 0, "\"<invalid>\""))) return s;
      break;
  }
  return 0;
}

/* === t_display_order ================================================== */

static __inline__ int
json_scan_t_display_order(display_order *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "order\"", 1+5)) {
      (*json)+= 1+5;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_display_order_enum(
             &(data->order), json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_display_order(char **json, char **end, size_t *len,
  const display_order *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"order\":"))) return s;
  if ((s = json_print_t_display_order_enum(json, end, len,
         data->order))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_camera_coin ==================================================== */

static __inline__ int
json_scan_t_camera_coin(camera_coin *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "x\"", 1+1)) {
      (*json)+= 1+1;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_float(
             &(data->x), json))) return s;
    } else
    if (!strncmp(*json, "y\"", 1+1)) {
      (*json)+= 1+1;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_float(
             &(data->y), json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_camera_coin(char **json, char **end, size_t *len,
  const camera_coin *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"x\":"))) return s;
  if ((s = json_print_float(json, end, len,
         data->x))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"y\":"))) return s;
  if ((s = json_print_float(json, end, len,
         data->y))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_camera_arena =================================================== */

static __inline__ int
json_scan_t_camera_arena(camera_arena *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "haut_gauche\"", 1+11)) {
      (*json)+= 1+11;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_camera_coin(
             &(data->haut_gauche), json))) return s;
    } else
    if (!strncmp(*json, "haut_droit\"", 1+10)) {
      (*json)+= 1+10;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_camera_coin(
             &(data->haut_droit), json))) return s;
    } else
    if (!strncmp(*json, "bas_gauche\"", 1+10)) {
      (*json)+= 1+10;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_camera_coin(
             &(data->bas_gauche), json))) return s;
    } else
    if (!strncmp(*json, "bas_droit\"", 1+9)) {
      (*json)+= 1+9;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_camera_coin(
             &(data->bas_droit), json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_camera_arena(char **json, char **end, size_t *len,
  const camera_arena *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"haut_gauche\":"))) return s;
  if ((s = json_print_t_camera_coin(json, end, len,
         &(data->haut_gauche)))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"haut_droit\":"))) return s;
  if ((s = json_print_t_camera_coin(json, end, len,
         &(data->haut_droit)))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"bas_gauche\":"))) return s;
  if ((s = json_print_t_camera_coin(json, end, len,
         &(data->bas_gauche)))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"bas_droit\":"))) return s;
  if ((s = json_print_t_camera_coin(json, end, len,
         &(data->bas_droit)))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_camera_robot =================================================== */

static __inline__ int
json_scan_t_camera_robot(camera_robot *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "position_avant\"", 1+14)) {
      (*json)+= 1+14;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_camera_coin(
             &(data->position_avant), json))) return s;
    } else
    if (!strncmp(*json, "position_arriere_gauche\"", 1+23)) {
      (*json)+= 1+23;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_camera_coin(
             &(data->position_arriere_gauche), json))) return s;
    } else
    if (!strncmp(*json, "position_arriere_droit\"", 1+22)) {
      (*json)+= 1+22;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_camera_coin(
             &(data->position_arriere_droit), json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_camera_robot(char **json, char **end, size_t *len,
  const camera_robot *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"position_avant\":"))) return s;
  if ((s = json_print_t_camera_coin(json, end, len,
         &(data->position_avant)))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"position_arriere_gauche\":"))) return s;
  if ((s = json_print_t_camera_coin(json, end, len,
         &(data->position_arriere_gauche)))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"position_arriere_droit\":"))) return s;
  if ((s = json_print_t_camera_coin(json, end, len,
         &(data->position_arriere_droit)))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_loco_data ====================================================== */

static __inline__ int
json_scan_t_loco_data(loco_data *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "nombre\"", 1+6)) {
      (*json)+= 1+6;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_float(
             &(data->nombre), json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_loco_data(char **json, char **end, size_t *len,
  const loco_data *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"nombre\":"))) return s;
  if ((s = json_print_float(json, end, len,
         data->nombre))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_incompatible_digest_client_digest ======================== */

static __inline__ int
json_scan_t_genom_incompatible_digest_client_digest(genom_incompatible_digest_client_digest *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "version\"", 1+7)) {
      (*json)+= 1+7;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string32(
             data->version, json))) return s;
    } else
    if (!strncmp(*json, "date\"", 1+4)) {
      (*json)+= 1+4;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string32(
             data->date, json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_incompatible_digest_client_digest(char **json, char **end, size_t *len,
  const genom_incompatible_digest_client_digest *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"version\":"))) return s;
  if ((s = json_print_string32(json, end, len,
         data->version))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"date\":"))) return s;
  if ((s = json_print_string32(json, end, len,
         data->date))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_incompatible_digest_server_digest ======================== */

static __inline__ int
json_scan_t_genom_incompatible_digest_server_digest(genom_incompatible_digest_server_digest *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "version\"", 1+7)) {
      (*json)+= 1+7;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string32(
             data->version, json))) return s;
    } else
    if (!strncmp(*json, "date\"", 1+4)) {
      (*json)+= 1+4;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string32(
             data->date, json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_incompatible_digest_server_digest(char **json, char **end, size_t *len,
  const genom_incompatible_digest_server_digest *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"version\":"))) return s;
  if ((s = json_print_string32(json, end, len,
         data->version))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"date\":"))) return s;
  if ((s = json_print_string32(json, end, len,
         data->date))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_incompatible_digest ====================================== */

static __inline__ int
json_scan_t_genom_incompatible_digest(genom_incompatible_digest_detail *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "client\"", 1+6)) {
      (*json)+= 1+6;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_genom_incompatible_digest_client_digest(
             &(data->client), json))) return s;
    } else
    if (!strncmp(*json, "server\"", 1+6)) {
      (*json)+= 1+6;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_t_genom_incompatible_digest_server_digest(
             &(data->server), json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_incompatible_digest(char **json, char **end, size_t *len,
  const genom_incompatible_digest_detail *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"client\":"))) return s;
  if ((s = json_print_t_genom_incompatible_digest_client_digest(json, end, len,
         &(data->client)))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"server\":"))) return s;
  if ((s = json_print_t_genom_incompatible_digest_server_digest(json, end, len,
         &(data->server)))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === string128 ======================================================== */

static __inline__ int
json_scan_string128(char data[128], const char **json)
{
  int s = 0;
  const char *d;
  char *p;

  json_skip_whitespace(*json);
  if (**json != '"') return EINVAL;
  d = ++(*json);
  while (**json != '"') {
    if (**json == '\\') (*json)++;
    (*json)++;
  }
  if (*json - d + 1 > 128) return EINVAL;
  strncpy(data, d, *json - d);
  data[*json - d] = '\0';
  p = data;
  while((p = strstr(p, "\\"))) {
    if (*p == '"' || *p == '\\')
      memmove(p, p+1, strlen(p)/*including final \0*/);
    p++;
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_string128(char **json, char **end, size_t *len,
  const char data[128])
{
  int s;
  if ((s = bufcat(json, end, len, 0, "\""))) return s;
  if ((s = bufcat(json, end, len, 1, data))) return s;
  if ((s = bufcat(json, end, len, 0, "\""))) return s;
  return 0;
}

/* === t_genom_bad_transition =========================================== */

static __inline__ int
json_scan_t_genom_bad_transition(genom_bad_transition_detail *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "from\"", 1+4)) {
      (*json)+= 1+4;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string128(
             data->from, json))) return s;
    } else
    if (!strncmp(*json, "to\"", 1+2)) {
      (*json)+= 1+2;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string128(
             data->to, json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_bad_transition(char **json, char **end, size_t *len,
  const genom_bad_transition_detail *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"from\":"))) return s;
  if ((s = json_print_string128(json, end, len,
         data->from))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"to\":"))) return s;
  if ((s = json_print_string128(json, end, len,
         data->to))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_interrupted ============================================== */

static __inline__ int
json_scan_t_genom_interrupted(genom_interrupted_detail *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "by\"", 1+2)) {
      (*json)+= 1+2;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string128(
             data->by, json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_interrupted(char **json, char **end, size_t *len,
  const genom_interrupted_detail *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"by\":"))) return s;
  if ((s = json_print_string128(json, end, len,
         data->by))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_serialization ============================================ */

static __inline__ int
json_scan_t_genom_serialization(genom_serialization_detail *data, const char **json)
{
  int s = 0;
  (void)data; /* fix -Wunused-parameter */
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_serialization(char **json, char **end, size_t *len,
  const genom_serialization_detail *data)
{
  int s;
  (void)data; /* fix -Wunused-parameter */
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_too_many_activities ====================================== */

static __inline__ int
json_scan_t_genom_too_many_activities(genom_too_many_activities_detail *data, const char **json)
{
  int s = 0;
  (void)data; /* fix -Wunused-parameter */
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_too_many_activities(char **json, char **end, size_t *len,
  const genom_too_many_activities_detail *data)
{
  int s;
  (void)data; /* fix -Wunused-parameter */
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_disallowed =============================================== */

static __inline__ int
json_scan_t_genom_disallowed(genom_disallowed_detail *data, const char **json)
{
  int s = 0;
  (void)data; /* fix -Wunused-parameter */
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_disallowed(char **json, char **end, size_t *len,
  const genom_disallowed_detail *data)
{
  int s;
  (void)data; /* fix -Wunused-parameter */
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === string256 ======================================================== */

static __inline__ int
json_scan_string256(char data[256], const char **json)
{
  int s = 0;
  const char *d;
  char *p;

  json_skip_whitespace(*json);
  if (**json != '"') return EINVAL;
  d = ++(*json);
  while (**json != '"') {
    if (**json == '\\') (*json)++;
    (*json)++;
  }
  if (*json - d + 1 > 256) return EINVAL;
  strncpy(data, d, *json - d);
  data[*json - d] = '\0';
  p = data;
  while((p = strstr(p, "\\"))) {
    if (*p == '"' || *p == '\\')
      memmove(p, p+1, strlen(p)/*including final \0*/);
    p++;
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_string256(char **json, char **end, size_t *len,
  const char data[256])
{
  int s;
  if ((s = bufcat(json, end, len, 0, "\""))) return s;
  if ((s = bufcat(json, end, len, 1, data))) return s;
  if ((s = bufcat(json, end, len, 0, "\""))) return s;
  return 0;
}

/* === t_genom_mwerr ==================================================== */

static __inline__ int
json_scan_t_genom_mwerr(genom_mwerr_detail *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "what\"", 1+4)) {
      (*json)+= 1+4;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_string256(
             data->what, json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_mwerr(char **json, char **end, size_t *len,
  const genom_mwerr_detail *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"what\":"))) return s;
  if ((s = json_print_string256(json, end, len,
         data->what))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_no_such_activity ========================================= */

static __inline__ int
json_scan_t_genom_no_such_activity(genom_no_such_activity_detail *data, const char **json)
{
  int s = 0;
  (void)data; /* fix -Wunused-parameter */
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_no_such_activity(char **json, char **end, size_t *len,
  const genom_no_such_activity_detail *data)
{
  int s;
  (void)data; /* fix -Wunused-parameter */
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_no_such_inport =========================================== */

static __inline__ int
json_scan_t_genom_no_such_inport(genom_no_such_inport_detail *data, const char **json)
{
  int s = 0;
  (void)data; /* fix -Wunused-parameter */
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_no_such_inport(char **json, char **end, size_t *len,
  const genom_no_such_inport_detail *data)
{
  int s;
  (void)data; /* fix -Wunused-parameter */
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_no_such_outport ========================================== */

static __inline__ int
json_scan_t_genom_no_such_outport(genom_no_such_outport_detail *data, const char **json)
{
  int s = 0;
  (void)data; /* fix -Wunused-parameter */
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_no_such_outport(char **json, char **end, size_t *len,
  const genom_no_such_outport_detail *data)
{
  int s;
  (void)data; /* fix -Wunused-parameter */
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_port_io ================================================== */

static __inline__ int
json_scan_t_genom_port_io(genom_port_io_detail *data, const char **json)
{
  int s = 0;
  (void)data; /* fix -Wunused-parameter */
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_port_io(char **json, char **end, size_t *len,
  const genom_port_io_detail *data)
{
  int s;
  (void)data; /* fix -Wunused-parameter */
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_no_such_remote =========================================== */

static __inline__ int
json_scan_t_genom_no_such_remote(genom_no_such_remote_detail *data, const char **json)
{
  int s = 0;
  (void)data; /* fix -Wunused-parameter */
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_no_such_remote(char **json, char **end, size_t *len,
  const genom_no_such_remote_detail *data)
{
  int s;
  (void)data; /* fix -Wunused-parameter */
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_no_such_service ========================================== */

static __inline__ int
json_scan_t_genom_no_such_service(genom_no_such_service_detail *data, const char **json)
{
  int s = 0;
  (void)data; /* fix -Wunused-parameter */
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_no_such_service(char **json, char **end, size_t *len,
  const genom_no_such_service_detail *data)
{
  int s;
  (void)data; /* fix -Wunused-parameter */
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_genom_remote_io ================================================ */

static __inline__ int
json_scan_t_genom_remote_io(genom_remote_io_detail *data, const char **json)
{
  int s = 0;
  (void)data; /* fix -Wunused-parameter */
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_genom_remote_io(char **json, char **end, size_t *len,
  const genom_remote_io_detail *data)
{
  int s;
  (void)data; /* fix -Wunused-parameter */
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_camera_map ===================================================== */

static __inline__ int
json_scan_t_camera_map(camera_map *data, const char **json)
{
  int s = 0;
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
    if (!strncmp(*json, "R\"", 1+1)) {
      (*json)+= 1+1;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_float(
             &(data->R), json))) return s;
    } else
    if (!strncmp(*json, "G\"", 1+1)) {
      (*json)+= 1+1;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_float(
             &(data->G), json))) return s;
    } else
    if (!strncmp(*json, "B\"", 1+1)) {
      (*json)+= 1+1;
      json_skip_whitespace(*json);
      if (*((*json)++) != ':') return EINVAL;
      if ((s = json_scan_float(
             &(data->B), json))) return s;
    } else
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_camera_map(char **json, char **end, size_t *len,
  const camera_map *data)
{
  int s;
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "\"R\":"))) return s;
  if ((s = json_print_float(json, end, len,
         data->R))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"G\":"))) return s;
  if ((s = json_print_float(json, end, len,
         data->G))) return s;
  if ((s = bufcat(json, end, len, 0, ",\"B\":"))) return s;
  if ((s = json_print_float(json, end, len,
         data->B))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_loco_INVALID_ORDER ============================================= */

static __inline__ int
json_scan_t_loco_INVALID_ORDER(loco_INVALID_ORDER_detail *data, const char **json)
{
  int s = 0;
  (void)data; /* fix -Wunused-parameter */
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_loco_INVALID_ORDER(char **json, char **end, size_t *len,
  const loco_INVALID_ORDER_detail *data)
{
  int s;
  (void)data; /* fix -Wunused-parameter */
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* === t_loco_INVALID_DATA ============================================== */

static __inline__ int
json_scan_t_loco_INVALID_DATA(loco_INVALID_DATA_detail *data, const char **json)
{
  int s = 0;
  (void)data; /* fix -Wunused-parameter */
  json_skip_whitespace(*json);
  if (*((*json)++) != '{') return EINVAL;
  json_skip_whitespace(*json);
  while(**json != '}') {
    if (*((*json)++) != '"') return EINVAL;
      return EINVAL;

    json_skip_whitespace(*json);
    if (**json == ',') {
      (*json)++;
      json_skip_whitespace(*json);
    }
  }
  (*json)++;
  return s;
}

static __inline__ int
json_print_t_loco_INVALID_DATA(char **json, char **end, size_t *len,
  const loco_INVALID_DATA_detail *data)
{
  int s;
  (void)data; /* fix -Wunused-parameter */
  if ((s = bufcat(json, end, len, 0, "{"))) return s;
  if ((s = bufcat(json, end, len, 0, "}"))) return s;
  return 0;
}

/* --- bufcat -------------------------------------------------------------- */

static int
bufcat(char **buf, char **end, size_t *len, int quoted, const char *data)
{
  size_t avail;
  const char *s;
  char *d;

  s = data;
  while(*s) {
    avail = *len - (*end - *buf);
    if (quoted) {
      for(d = *end; *s && avail; avail--) {
        if (*s == '"' || *s == '\\') {
          if (avail < 2) {
            avail = 0;
            break;
          }
          *d++ = '\\';
          avail--;
        }
        *d++ = *s++;
      }
    } else {
      for(d = *end; *s && avail; avail--)
        *d++ = *s++;
    }

    if (!avail) {
      char *newbuf = (char *)realloc(*buf, *len << 1);
      if (!*newbuf) return ENOMEM;

      d = newbuf + (d - *buf);
      *buf = newbuf;
      *len <<= 1;
    }
    *d = 0;
    *end = d;
  }

  return 0;
}

static int
bufcat_uint64_t(char **buf, char **end, size_t *len, int neg, uint64_t i)
{
  char a[32];
  char *d;

  d = a + sizeof(a);
  *--d = 0;
  do { *--d = '0' + i%10; } while (i /= 10);
  if (neg) *--d = '-';

  return bufcat(buf, end, len, 0, d);
}
